import React, {Fragment, PureComponent} from 'react'import {    ActivityIndicator,    Animated,    BackHandler,    FlatList,    Image,    Keyboard,    Modal,    RefreshControl,    ScrollView,    StatusBar,    Text,    TextInput,    TouchableOpacity,    View,    Linking,    SafeAreaView,} from 'react-native'import {Picker} from '@react-native-picker/picker';import {connect} from 'react-redux'import {withTranslation} from 'react-i18next'import {goToBack, sp} from '../../../utils/func'import {    changeFileFolderApi,    countStatusApi,    createFolderApi,    deleteFileApi,    deleteFolderApi,    fileSearchApi,    getFoldersApi,    updateFileNameApi,    updateFolderNameApi,    updateLastUseDateApi,} from '../../../api'import {IS_IOS} from '../../../constants/common'import {colors, fonts} from '../../../styles/vars'import Loader from '../../../components/Loader/Loader'import CustomIcon from '../../../components/Icons/Fontello'import {CheckBox, Icon} from 'react-native-elements'import ActionButton from 'react-native-action-button'import {ActionSheet, ActionSheetItem} from 'react-native-action-sheet-component'import styles from './ArchivesStyles'import 'react-native-gesture-handler';import Icons from 'react-native-vector-icons/MaterialCommunityIcons'import CalendarSlider from '../../../components/CalendarModal/CalendarSlider'import AppTimezone from '../../../utils/appTimezone'import FilterSlider from './components/FilterSlider'import Folders from './components/Folders'import FileSlider from './components/FileSlider'import RNFS from 'react-native-fs'import commonStyles from '../../../styles/styles'// import CameraRoll from '@react-native-community/cameraroll'// let CameraRoll;// if (!IS_IOS) CameraRoll = require('@react-native-community/cameraroll')// else if (IS_IOS) CameraRoll = require('@react-native-community/cameraroll-ios')import {CameraRoll} from '@react-native-camera-roll/camera-roll';import {LocaleConfig} from 'react-native-calendars'import {setOpenedBottomSheet} from '../../../redux/actions/user'@connect(state => ({    user: state.user,    currentCompanyId: state.currentCompanyId,    isRtl: state.isRtl,    companies: state.companies,}))@withTranslation()export default class ArchivesScreen extends PureComponent {    inputRef = null    intervalId = null    constructor(props) {        super(props)        const listOfYears = []        for (let iM = 0; iM < 40; iM++) {            listOfYears.push(String(AppTimezone.moment().subtract(iM, 'year').get('year')))        }        this.state = {            listOfYears: listOfYears,            maamMonth: {                month: AppTimezone.moment().get('month'),                year: AppTimezone.moment().get('year'),            },            esderMaam: null,            pickerSliderOpen: false,            arrImgs: [],            selectFilesToEdit: [],            editFiles: false,            folderSpecific: false,            arrFoldersIdsPressed: [],            slide: new Animated.Value(0),            isLayoutComplete: false,            calendarSliderOpen: false,            query: null,            countStatusDataFixed: false,            countStatusData: false,            refreshing: false,            scrollAnim: new Animated.Value(0),            inProgress: true,            fadeAnim: new Animated.Value(0),            showFilesScreen: false,            filesProgress: false,            endCursor: false,            loadingMore: false,            files: [],            folders: [],            forLogic: null,            hideDeleteFilesOption: true,            showFilesEditNavBottom: false,            editFilesShowFolderToTransfer: false,            modalAlert: {                visible: false,                children: {                    header: null,                    body: null,                    footer: null,                },                funcPressScope: null,                styleWrap: null,            },            sorts: [                {                    text: 'שם תיקייה',                    val: 'folderName',                    sortDown: true,                },                {                    text: 'בשימוש נפוץ',                    val: 'lastUseDate',                    sortDown: true,                },                {                    text: 'פתיחה אחרונה',                    val: 'dateCreated',                    sortDown: true,                },            ],            sortValue: {                text: 'מיון',                val: 'folderName',                sortDown: true,            },            sortsFiles: [                {                    text: 'שם',                    val: 'name',                    sortDown: true,                },                {                    text: 'תאריך שליחה',                    val: 'sendDate',                    sortDown: true,                },            ],            sortFileValue: {                text: 'מיון',                val: 'name',                sortDown: true,            },            viewFoldersAsGrid: false,            takeMorePhotos: false,            alertMoreThanFive: false,            containerSelectedPhotos: [],            alertMoreThanThirty: false,            fadeAnimThirty: new Animated.Value(0),            refreshingPhotos: false,            folderEditItem: false,            folderItemForChange: false,            fileItemForChange: false,            dateFromTimestamp: AppTimezone.moment().valueOf(),            dateTillTimestamp: AppTimezone.moment().add(1, 'month').valueOf(),            dateSendFromTimestamp: AppTimezone.moment().valueOf(),            dateSendTillTimestamp: AppTimezone.moment().add(1, 'month').valueOf(),            filterSliderOpen: false,            folderNameList: [],            fileSearchParams: {                'companyId': this.props.currentCompanyId,                'folderIds': [],                'invoiceDateFrom': null,                'invoiceDateTill': null,                'sendDateFrom': null,                'sendDateTill': null,                'text': null,                'pageSize': 50,                'pageNum': 0,            },            fileSliderOpen: false,        }    }    get currentCompany() {        const {companies, currentCompanyId} = this.props        if (!companies || !companies.length) {            return {}        }        const currentCompany = companies.find(c => c.companyId === currentCompanyId) || {}        return currentCompany    }    componentDidMount() {        BackHandler.addEventListener('hardwareBackPress', this.handleBackPress)        this.setState({            esderMaam: this.currentCompany ? this.currentCompany.esderMaam : null,        })        this.getFolders()    }    getFolders = (getReqFromPopUp) => {        this.setState({            inProgress: true,        })        getFoldersApi.post({            body: {                'uuid': this.props.currentCompanyId,            },        })            .then(folders => {                if (!folders || (folders && typeof folders !== 'object')) {                    folders = []                }                let folderNameList = []                if (folders && folders.length) {                    const isHebrew = folders.filter((it) => /[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                    const isEnglish = folders.filter((it) => /^[A-Za-z]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                    const isNumbers = folders.filter((it) => /^[0-9]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                    const isOthers = folders.filter((it) => !/^[A-Za-z]+$/.test(it.folderName) && !/^[0-9]+$/.test(it.folderName) && !/[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                    folderNameList = isHebrew.concat(isEnglish, isNumbers, isOthers)                    folderNameList.forEach(fold => {                        fold.press = this.state.folderNameList.length ? this.state.folderNameList.some(fd => fd.folderId === fold.folderId && fd.press) : false                    })                }                this.setState({                    folderNameList,                    folders,                    refreshing: false,                    inProgress: false,                    isLayoutComplete: true,                }, () => {                    if (this.state.folders && this.state.folders.length > 0) {                        this.sortFolders(this.state.sortValue)                    }                    if (!getReqFromPopUp) {                        this.getCountStatus()                    }                })            })            .catch((error) => {                console.log(error)                this.setState({                    inProgress: false,                    isLayoutComplete: true,                    folders: [],                }, () => {                })            })    }    getCountStatus(): void {        this.setState({            countStatusDataFixed: false,        }, () => {            if (this.props.currentCompanyId) {                countStatusApi.post({                    body: {                        'uuid': this.props.currentCompanyId,                    },                })                    .then(countStatusDataFixed => {                        console.log(countStatusDataFixed)                        this.setState({                            countStatusDataFixed,                        }, () => {                            if (this.state.countStatusDataFixed.forLogic > 0) {                                this.setState({                                    forLogic: (this.state.countStatusDataFixed.forLogic === 1                                        ? 'מסמך ממתין לפיענוח'                                        : (this.state.countStatusDataFixed.forLogic + ' מסמכים ממתינים לפיענוח')),                                })                                this.slide()                            } else {                                this.setState({                                    forLogic: null,                                })                                this.slide()                            }                        })                    })                    .catch((error) => {                        console.log(error)                    })            }            if (this.intervalId) {                clearInterval(this.intervalId)            }            this.countStatus()        })    }    countStatus(): void {        this.intervalId = setInterval(() => {            if (this.props.currentCompanyId) {                countStatusApi.post({                    body: {                        'uuid': this.props.currentCompanyId,                    },                })                    .then(countStatusData => {                        if (this.state.countStatusData) {                            // const numNewDocs = countStatusData.forConfirm - this.state.countStatusData.forConfirm                            // if (numNewDocs > 0) {                            //   const text = countStatusData.forConfirm === 1                            //     ? 'קיים מסמך חדש'                            //     : ('קיימים ' +                            //       countStatusData.forConfirm.toString() +                            //       ' מסמכים חדשים'                            //     )                            //   console.log(text)                            //   // this.snackBar.openFromComponent(NewDocsAvailablePromptComponent, {                            //   //   duration: 0,                            //   //   horizontalPosition: 'end',                            //   //   verticalPosition: 'bottom',                            //   //   direction: this.userService.appData.dir,                            //   //   panelClass: 'docs-update-snack',                            //   //   data: {                            //   //     text: text,                            //   //     onRefreshSelected: (() => {                            //   //       this.snackBar.dismiss();                            //   //       this.getFolders();                            //   //     }).bind(this)                            //   //   }                            //   // });                            // }                            if (countStatusData.forLogic !== this.state.countStatusData.forLogic) {                                this.setState({                                    forLogic: (countStatusData.forLogic === 1                                        ? 'מסמך ממתין לפיענוח'                                        : (countStatusData.forLogic + ' מסמכים ממתינים לפיענוח')),                                })                                this.slide()                            } else {                                this.setState({                                    forLogic: null,                                })                                this.slide()                            }                        }                        this.setState({                            countStatusData,                        })                    })                    .catch((error) => {                        console.log(error)                    })            }        }, (5 * 60 * 1000))    }    componentWillUnmount() {        BackHandler.removeEventListener('hardwareBackPress', this.handleBackPress)        this.inputRef = null    }    handleBackPress = () => {        this.props.dispatch(setOpenedBottomSheet(false))        goToBack(this.props.navigation)        return true    }    handleScrollEnd = (e) => {        this.setState({currentScrollPosition: e.nativeEvent.contentOffset.y})        Keyboard.dismiss()    }    endEditing = () => {        const formattedText = this.state.query        this.setState({query: formattedText})        this.handleCloseKeyboard()    }    handleChangeQuery = (query) => {        console.log(query)        const fileSearchParams = Object.assign({}, this.state.fileSearchParams)        fileSearchParams.text = query && query.length ? query : null        this.setState({query, fileSearchParams}, () => {            if ((fileSearchParams.invoiceDateFrom !== null && fileSearchParams.invoiceDateTill !== null) || (fileSearchParams.sendDateFrom !== null && fileSearchParams.sendDateTill !== null) || fileSearchParams.folderIds.length > 0 || fileSearchParams.text !== null) {                console.log('-------------sender')                this.fileSearch(fileSearchParams)            } else {                console.log('-------------goBack')                this.setState({                    showFilesScreen: false,                    filesProgress: false,                    folderSpecific: false,                    refreshing: false,                    files: [],                    query: null,                    fileSearchParams: {                        'companyId': this.props.currentCompanyId,                        'folderIds': [],                        'invoiceDateFrom': null,                        'invoiceDateTill': null,                        'sendDateFrom': null,                        'sendDateTill': null,                        'text': null,                        'pageSize': 50,                        'pageNum': 0,                    },                })            }        })    }    handleSearch = () => {        const {query} = this.state        console.log('handleSearch-------')        this.setState({query}, () => {        })    }    containerTouched = () => {        if (this.inputRef && this.inputRef.blur) {            this.inputRef.blur()        }        return false    }    handleSetRef = (ref) => {        this.inputRef = ref    }    handleCloseKeyboard = () => {        Keyboard.dismiss()    }    closeAlertModalHandle = () => {        this.closeAlertModal(true)    }    // closeAlertModal = (dontShowCancelAlert) => {    //   const { fadeAnim } = this.state    //   const showCancelAlert = dontShowCancelAlert !== true    //   const modalAlert = Object.assign({}, this.state.modalAlert)    //   modalAlert.visible = showCancelAlert    //   modalAlert.children = {    //     header: null,    //     body: !showCancelAlert ? null : (<Animated.View style={{    //       opacity: fadeAnim,    //       flexDirection: 'row-reverse',    //       justifyContent: 'center',    //       alignContent: 'center',    //       alignItems: 'center',    //       height: 40,    //       width: 261.5,    //       zIndex: 99,    //       backgroundColor: '#022258',    //       borderRadius: 20,    //       marginBottom: 136,    //     }}>    //       <Text style={{    //         alignSelf: 'center',    //         color: '#ffffff',    //         fontSize: sp(16.5),    //         fontFamily: fonts.regular,    //         textAlign: 'center',    //       }}>{'השליחה בוטלה'}</Text>    //     </Animated.View>),    //     footer: null,    //   }    //   modalAlert.showCancelAlert = showCancelAlert    //   modalAlert.funcPressScope = !showCancelAlert ? null : this.closeAlertModalHandle    //   modalAlert.styleWrap = !showCancelAlert ? null : {    //     position: 'absolute',    //     top: '50%',    //     right: '50%',    //     marginRight: -130.75,    //     height: 40,    //     width: 261.5,    //     flexDirection: 'column',    //     marginTop: -20,    //   }    //   if (showCancelAlert) {    //     Animated.timing(    //       fadeAnim,    //       {    //         toValue: 1,    //         duration: 600,    //       },    //     ).start(() => {    //       setTimeout(() => {    //         Animated.timing(    //           fadeAnim,    //           {    //             toValue: 0,    //             duration: 300,    //           },    //         ).start(() => {    //           this.closeAlertModal(true)    //         })    //       }, 3000)    //     })    //   } else {    //     Animated.timing(    //       fadeAnim,    //       {    //         toValue: 0,    //         duration: 300,    //       },    //     ).start()    //   }    //   this.setState({    //     modalAlert,    //   }, () => {    //    //   })    // }    _onRefresh = () => {        if (!this.state.showFilesScreen) {            this.setState({refreshing: true})            this.getFolders()        } else {            const fileSearchParams = Object.assign({}, this.state.fileSearchParams)            fileSearchParams.pageSize = 50            fileSearchParams.pageNum = 0            this.setState({refreshing: true, fileSearchParams}, () => {                this.fileSearch(this.state.fileSearchParams)            })        }    }    handleToggleFileCheck = (file) => () => {        let files = JSON.parse(JSON.stringify(this.state.files))        files.find((it) => it.fileId === file.fileId).press = !files.find((it) => it.fileId === file.fileId).press        this.setState({            files,            selectFilesToEdit: files.filter(fd => fd.press),        })    }    folderSelect = (folder) => () => {        const fileSearchParams = Object.assign({}, this.state.fileSearchParams)        fileSearchParams.folderIds = [folder.folderId]        this.setState({            fileSearchParams,            folderSpecific: folder,        }, () => {            console.log('fileSearchParams----', this.state.fileSearchParams)            this.fileSearch(this.state.fileSearchParams, folder)        })    }    renderFolder = ({item, index}) => {        if (item.empty === true) {            return <View style={[styles.folderGrid, styles.itemInvisible]}/>        }        const {viewFoldersAsGrid} = this.state        return (            <TouchableOpacity                key={index}                onPress={this.folderSelect(item)}                style={viewFoldersAsGrid ? [styles.folderGrid, {height: 110}] : [styles.folderRow]}>                <View style={{                    position: 'relative',                }}>                    <CustomIcon                        name={'folder'}                        size={viewFoldersAsGrid ? 60 : 40}                        color={'#022258'}/>                    {item.editable === false && (                        <Image                            resizeMode="cover"                            style={[{                                height: viewFoldersAsGrid ? 16.5 : 9.5,                                width: viewFoldersAsGrid ? 16.5 : 9.5,                                position: 'absolute',                                bottom: viewFoldersAsGrid ? 10 : 8,                                right: viewFoldersAsGrid ? 5 : 4,                            }]}                            source={require('BiziboxUI/assets/b.png')}/>                    )}                </View>                <View style={{                    marginLeft: 10,                    flexDirection: 'row-reverse',                    alignItems: 'center',                    alignContent: 'center',                    justifyContent: 'space-between',                    flex: 1,                    paddingTop: viewFoldersAsGrid ? 5 : 0,                }}>                    <Text style={{                        fontSize: sp(17.5),                        color: '#022258',                        fontFamily: fonts.regular,                    }}>{item.folderName}</Text>                    {item.editable && (                        <TouchableOpacity                            style={{                                alignSelf: viewFoldersAsGrid ? 'flex-start' : 'center',                            }}                            hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                            onPress={this.openActionSheetEdit(item)}>                            <Icon                                iconStyle={{                                    marginLeft: -10,                                }}                                name={'dots-vertical'}                                type="material-community"                                size={viewFoldersAsGrid ? 36 : 30}                                color={'#022258'}                            />                        </TouchableOpacity>                    )}                </View>            </TouchableOpacity>        )    }    openBottomSlideFile = (file) => () => {        this.setState({            fileSliderOpen: file,        })    }    closeBottomSlideFile = () => {        this.setState({            fileSliderOpen: false,        })    }    bottomActionSheetShow = () => {        this.bottomActionSheetFileEditFromSlide.show(() => {            console.log('callback - show')        })    }    onHideFileEditFromSlide = () => {        console.log('onHide')        if (this.bottomActionSheetFileEditFromSlide) {            this.bottomActionSheetFileEditFromSlide.hide(() => {                console.log('callback - bottomActionSheetEdit')            })        } else {        }    }    setFileImgs = (arrImgs) => {        console.log('setFileImgs---', arrImgs)        this.setState({            arrImgs,        })    }    updateFileName = () => {        const {fileSliderOpen} = this.state        if (this.state.fileItemForChange.name && this.state.fileItemForChange.name.toString().length > 0) {            this.handleCloseKeyboard()            const fileItemForChange = Object.assign({}, this.state.fileItemForChange)            fileItemForChange.error = false            this.setState({fileItemForChange})            const fileSlider = Object.assign({}, fileSliderOpen)            fileSlider.name = this.state.fileItemForChange.name            updateFileNameApi.post({                body: {                    'id': fileSliderOpen.fileId,                    'name': this.state.fileItemForChange.name,                },            })                .then(() => {                    const filesState = JSON.parse(JSON.stringify(this.state.files))                    filesState.find(it => it.fileId === fileSliderOpen.fileId).name = this.state.fileItemForChange.name                    this.setState({                        fileSliderOpen: fileSlider,                        files: filesState,                    }, () => {                        this.closeAlertModalHandle()                        this.sortFiles(this.state.sortFileValue)                    })                })                .catch(() => {                })        } else {            const fileItemForChange = Object.assign({}, this.state.fileItemForChange)            fileItemForChange.error = true            this.setState({fileItemForChange})        }    }    onItemPressFilesEditFromSlide = (value) => {        const {fileSliderOpen} = this.state        if (value !== 'cancel') {            if (value === 'changeFileName') {                this.setState({                    fileItemForChange: {name: fileSliderOpen.name},                }, () => {                    const modalAlert = Object.assign({}, this.state.modalAlert)                    modalAlert.visible = true                    modalAlert.children = {                        header: (<View style={{                            height: 40,                            flexDirection: 'row-reverse',                            justifyContent: 'center',                            alignSelf: 'center',                        }}>                            <Text style={{                                paddingHorizontal: 20,                                paddingTop: 15,                                color: '#022258',                                fontSize: sp(18),                                fontFamily: fonts.semiBold,                                textAlign: 'center',                            }}>{'שינוי שם מסמך'}</Text>                        </View>),                        body: () => {                            return (                                <View style={{                                    flex: 1,                                    flexDirection: 'row-reverse',                                    justifyContent: 'center',                                    marginTop: 20,                                }}>                                    <View style={{                                        height: 28,                                        marginHorizontal: 22.5,                                        flexDirection: 'row-reverse',                                        borderBottomColor: !this.state.fileItemForChange.error ? '#022258' : 'red',                                        borderBottomWidth: 1,                                        flex: 1,                                    }}>                                        <TextInput                                            ref={this.handleSetRef}                                            blurOnSubmit                                            autoFocus                                            onBlur={this.handleCloseKeyboard}                                            onSubmitEditing={this.updateFileName}                                            autoCorrect={false}                                            autoCapitalize="sentences"                                            returnKeyType="send"                                            keyboardType="default"                                            style={[{                                                direction: 'ltr',                                                textAlign: 'right',                                                flex: 1,                                                height: 28,                                                fontSize: sp(14),                                                color: colors.blue32,                                                fontFamily: fonts.regular,                                                paddingVertical: 1,                                                paddingHorizontal: 5,                                            }]}                                            placeholder={'שם המסמך'}                                            placeholderTextColor={'#cac9c9'}                                            value={this.state.fileItemForChange.name}                                            multiline={false}                                            onEndEditing={(e) => {                                                this.handleCloseKeyboard()                                                const fileItemForChange = Object.assign({}, this.state.fileItemForChange)                                                fileItemForChange.name = e.nativeEvent.text                                                this.setState({fileItemForChange})                                            }}                                            onChangeText={(name) => {                                                console.log(name)                                                const fileItemForChange = Object.assign({}, this.state.fileItemForChange)                                                fileItemForChange.name = name                                                this.setState({fileItemForChange})                                            }}                                            underlineColorAndroid="rgba(0,0,0,0)"                                        />                                    </View>                                </View>)                        },                        footer: (                            <View style={{                                marginHorizontal: 20,                                height: 45,                                flexDirection: 'row-reverse',                                justifyContent: 'flex-end',                            }}>                                <TouchableOpacity                                    onPress={this.closeAlertModalHandle}                                    style={{                                        width: 65,                                    }}>                                    <Text style={{                                        color: '#038ed6',                                        fontSize: sp(18),                                        fontFamily: fonts.semiBold,                                    }}>                                        {'ביטול'}                                    </Text>                                </TouchableOpacity>                                <TouchableOpacity                                    onPress={this.updateFileName}                                    style={{                                        width: 65,                                    }}>                                    <Text style={{                                        color: '#038ed6',                                        fontSize: sp(18),                                        fontFamily: fonts.semiBold,                                    }}>                                        {'אישור'}                                    </Text>                                </TouchableOpacity>                            </View>                        ),                    }                    modalAlert.styleWrap = {                        backgroundColor: 'white',                        borderRadius: 8,                        position: 'absolute',                        top: 127,                        right: '50%',                        marginRight: -160,                        height: 174.5,                        width: 320,                        flexDirection: 'column',                    }                    this.setState({                        modalAlert,                    })                })            } else if (value === 'transferFileToAnotherFolder') {                this.setState({                    selectFilesToEdit: [fileSliderOpen],                }, () => {                    this.setState({                        editFilesShowFolderToTransfer: true,                    })                })            } else if (value === 'deleteFile') {                const modalAlert = Object.assign({}, this.state.modalAlert)                modalAlert.visible = true                modalAlert.params = {                    'ids': [fileSliderOpen.fileId],                }                modalAlert.children = {                    header: null,                    body: () => {                        return (                            <View style={{                                flex: 1,                                marginTop: 15,                                paddingHorizontal: 7,                            }}>                                <View style={{                                    marginHorizontal: 22.5,                                    flex: 1,                                    flexDirection: 'column',                                    justifyContent: 'flex-start',                                    alignItems: 'flex-end',                                }}>                                    <Text style={{                                        textAlign: 'right',                                        color: '#022258',                                        fontSize: sp(18),                                        fontFamily: fonts.regular,                                    }}>{fileSliderOpen.statusDesc === null ? 'המסמך ' : 'החשבונית '}<Text style={{                                        fontFamily: fonts.bold,                                    }}>{fileSliderOpen.name}</Text>{fileSliderOpen.statusDesc === null ? ' ימחק ללא אפשרות שחזור. האם למחוק?' : ' תימחק מתיקייה זו בלבד. האם למחוק?'}                                    </Text>                                </View>                            </View>)                    },                    footer: (                        <View style={{                            marginHorizontal: 20,                            height: 45,                            flexDirection: 'row-reverse',                            justifyContent: 'flex-end',                        }}>                            <TouchableOpacity                                onPress={this.closeAlertModalHandle}                                style={{                                    width: 65,                                }}>                                <Text style={{                                    color: '#038ed6',                                    fontSize: sp(18),                                    fontFamily: fonts.semiBold,                                }}>                                    {'ביטול'}                                </Text>                            </TouchableOpacity>                            <TouchableOpacity                                onPress={this.sendDeleteFiles}                                style={{                                    width: 65,                                }}>                                <Text style={{                                    color: '#038ed6',                                    fontSize: sp(18),                                    fontFamily: fonts.semiBold,                                }}>                                    {'אישור'}                                </Text>                            </TouchableOpacity>                        </View>                    ),                }                modalAlert.styleWrap = {                    backgroundColor: 'white',                    borderRadius: 8,                    position: 'absolute',                    top: 127,                    right: '50%',                    marginRight: -160,                    height: 145,                    width: 320,                    flexDirection: 'column',                }                this.setState({                    modalAlert,                })            } else if (value === 'downloadFile') {                const arrImgs = this.state.arrImgs                let filesDownloaded = 0                arrImgs.forEach((img, index) => {                    img.percentage = 0                    img.error = false                    const path = arrImgs.length > 1 ? `${RNFS.TemporaryDirectoryPath}${fileSliderOpen.name}_${index}.jpg` : `${RNFS.TemporaryDirectoryPath}${fileSliderOpen.name}.jpg`                    console.log(path)                    RNFS.downloadFile({                        fromUrl: img.contentUrl,                        toFile: path,                        background: true,                        discretionary: true,                        progressDivider: 1,                        progress: (data) => {                            const percentage = ((100 * data.bytesWritten) / data.contentLength) || 0                            console.log('# percentage :', percentage)                            const fileSliderImg = JSON.parse(JSON.stringify(this.state.arrImgs))                            fileSliderImg[index].percentage = percentage                            this.setState({                                arrImgs: fileSliderImg,                            })                        },                    }).promise.then((r) => {                        console.log('----r', r)                        const fileSliderImg = JSON.parse(JSON.stringify(this.state.arrImgs))                        fileSliderImg[index].error = r.statusCode !== 200                        this.setState({                            arrImgs: fileSliderImg,                        })                        CameraRoll.saveToCameraRoll(path)                            .then(() => {                                filesDownloaded += 1                                if (filesDownloaded === arrImgs.length) {                                    setTimeout(() => {                                        this.closeAlertModalHandle()                                        setTimeout(() => {                                            this.setState({                                                arrImgs: [],                                                fileSliderOpen: false,                                            })                                        }, 500)                                    }, 500)                                }                            })                            .catch(() => {                                filesDownloaded += 1                                if (filesDownloaded === arrImgs.length) {                                    setTimeout(() => {                                        this.closeAlertModalHandle()                                        setTimeout(() => {                                            this.setState({                                                arrImgs: [],                                                fileSliderOpen: false,                                            })                                        }, 500)                                    }, 500)                                }                            })                    })                })                const modalAlert = Object.assign({}, this.state.modalAlert)                modalAlert.visible = true                modalAlert.funcPressScope = null                modalAlert.children = {                    header: null,                    body: () => {                        return (<View style={{                            flexDirection: 'column',                            width: '100%',                            flex: 1,                        }}>                            <View style={{                                height: 100,                            }}>                                <Text style={{                                    paddingHorizontal: 20,                                    color: '#022258',                                    fontSize: sp(18),                                    fontFamily: fonts.semiBold,                                    textAlign: 'center',                                    paddingBottom: 15,                                    paddingTop: 10,                                }}>{this.state.statusUpload}</Text>                                <ActivityIndicator color="#999999"/>                            </View>                            <View style={{                                width: '100%',                                height: '100%',                                marginTop: 0,                                marginBottom: 0,                                paddingLeft: 0,                                paddingRight: 0,                                flex: 1,                            }}>                                <ScrollView                                    keyboardShouldPersistTaps="always">                                    {this.state.arrImgs.map((c, i) => {                                        return (                                            <View                                                key={i}                                                style={[{                                                    paddingHorizontal: 15,                                                    height: 65,                                                    flexDirection: 'column',                                                    flex: 1,                                                    width: '100%',                                                }]}>                                                <View style={styles.bar}>                                                    <View style={[styles.fillBar, {                                                        backgroundColor: c.error ? '#cd1010' : ((c.percentage >= 100) ? '#229f88' : '#022258'),                                                        borderBottomRightRadius: (c.percentage >= 100) ? 4 : 0,                                                        borderTopRightRadius: (c.percentage >= 100) ? 4 : 0,                                                        width: c.percentage ? c.percentage + '%' : '0%',                                                    }]}/>                                                    {!c.error && (c.percentage >= 100) && (                                                        <CustomIcon                                                            style={{                                                                position: 'absolute',                                                                top: 2,                                                                left: '48%',                                                            }}                                                            name={'tick'}                                                            size={14}                                                            color={'#ffffff'}                                                        />                                                    )}                                                    {c.error && (                                                        <Icons                                                            style={{                                                                position: 'absolute',                                                                top: 2,                                                                left: '48%',                                                            }}                                                            name="close"                                                            size={14}                                                            color={'#ffffff'}                                                        />                                                    )}                                                </View>                                                <Text                                                    numberOfLines={1}                                                    ellipsizeMode="tail"                                                    style={{                                                        color: '#022258',                                                        fontSize: sp(12),                                                        fontFamily: fonts.regular,                                                        textAlign: 'center',                                                    }}>{arrImgs.length > 1 ? `${fileSliderOpen.name}_${i}` : `${fileSliderOpen.name}`}</Text>                                                <Text style={{                                                    color: '#022258',                                                    fontSize: sp(14),                                                    fontFamily: fonts.semiBold,                                                    textAlign: 'center',                                                }}>{c.percentage ? c.percentage : '0'}{'%'}</Text>                                            </View>)                                    })}                                </ScrollView>                            </View>                        </View>)                    },                    footer: null,                }                modalAlert.styleWrap = {                    backgroundColor: 'white',                    borderRadius: 8,                    position: 'absolute',                    top: 160,                    right: '50%',                    marginRight: -160,                    height: 225,                    width: 320,                    flexDirection: 'column',                }                this.setState({                    modalAlert,                    statusUpload: 'הורדת קבצים',                })            }        } else {            console.log(value)        }    }    renderFile = ({item, index}) => {        return (            <View                key={item.fileId + '_' + index}                style={[styles.fileRow,                    this.state.editFiles ? {                        marginLeft: 0,                        paddingLeft: 0,                    } : {},                ]}>                <View style={{                    flexDirection: 'row-reverse',                    flex: 1,                }}>                    {this.state.editFiles && (                        <View style={{                            flexDirection: 'row',                            alignItems: 'center',                        }}>                            <CheckBox                                containerStyle={{                                    backgroundColor: 'transparent',                                    left: 0,                                    margin: 0,                                    padding: 0,                                    borderWidth: 0,                                    right: 0,                                    marginRight: 0,                                    opacity: this.state.editFiles === 'deleteFiles' && item.details && item.statusDesc ? 0.2 : 1,                                }}                                right                                iconRight                                size={25}                                checkedColor={'#022258'}                                uncheckedColor={'#022258'}                                iconType="material-community"                                checkedIcon="checkbox-blank-circle"                                uncheckedIcon="checkbox-blank-circle-outline"                                checked={item.press}                                onPress={this.state.editFiles === 'deleteFiles' && item.details && item.statusDesc ? null : this.handleToggleFileCheck(item)}                            />                        </View>                    )}                    <View style={{                        flexDirection: 'column',                        justifyContent: 'center',                        alignItems: 'flex-end',                        maxWidth: '80%',                    }}>                        <Text                            numberOfLines={1}                            ellipsizeMode="tail"                            style={{                                fontSize: sp(17.5),                                color: '#022258',                                fontFamily: fonts.bold,                            }}>{item.name}</Text>                        <Text style={{                            fontSize: sp(14),                            color: '#022258',                            fontFamily: fonts.regular,                        }}>{'תאריך שליחה '}{AppTimezone.moment(item.sendDate).format('DD/MM/YYYY')}</Text>                        {this.state.fileSearchParams.folderIds[0] === '11111111-1111-1111-1111-111111111111' && this.state.esderMaam !== 'NONE' && (                            <Text style={{                                fontSize: sp(14),                                color: '#022258',                                fontFamily: fonts.regular,                            }}>{'דווח במע"מ '}{item.maamMonth}</Text>                        )}                        {item.statusDesc && (                            <Text style={{                                fontSize: sp(14),                                color: item.statusDesc && item.statusDesc === 'ממתין לקליטה' ? '#022258' : '#229f88',                                fontFamily: fonts.light,                            }}>{item.statusDesc}</Text>                        )}                    </View>                </View>                <View style={{                    flexDirection: 'row-reverse',                    marginLeft: 'auto',                }}>                    {item.folderName && (<Text style={{                        fontSize: sp(16),                        color: '#818080',                        fontFamily: fonts.regular,                    }}>{item.folderName}</Text>)}                    <TouchableOpacity                        hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                        onPress={this.openBottomSlideFile(item)}>                        <Icon name="chevron-left" size={22} color={'#022258'}/>                    </TouchableOpacity>                </View>            </View>        )    }    renderSeparatorView = () => {        return (            <View style={{                height: 19,                width: '100%',            }}/>        )    }    renderSeparatorLine = () => {        return (            <View style={{                height: 1,                backgroundColor: '#022258',                width: '100%',            }}/>        )    }    formatRow = (dataArr, numColumns) => {        const data = JSON.parse(JSON.stringify(dataArr))        const numberOfFullRows = Math.floor(data.length / numColumns)        let numberOfElementsLastRow = data.length - (numberOfFullRows * numColumns)        while (numberOfElementsLastRow !== numColumns && numberOfElementsLastRow !== 0) {            data.push({key: `blank-${numberOfElementsLastRow}`, empty: true})            numberOfElementsLastRow++        }        return data    }    // closeAlertModal = () => {    //   const modalAlert = Object.assign({}, this.state.modalAlert)    //   modalAlert.visible = false    //   modalAlert.children = {    //     header: null,    //     body: null,    //     footer: null,    //   }    //   modalAlert.styleWrap = null    //   this.setState({    //     folderItemForChange: false,    //     modalAlert,    //   })    // }    closeAlertModal = (dontShowCancelAlert) => {        const {fadeAnim} = this.state        const showCancelAlert = dontShowCancelAlert !== true        const modalAlert = Object.assign({}, this.state.modalAlert)        modalAlert.visible = showCancelAlert        modalAlert.children = {            header: null,            body: !showCancelAlert ? null : (<Animated.View style={{                opacity: fadeAnim,                flexDirection: 'row-reverse',                justifyContent: 'center',                alignContent: 'center',                alignItems: 'center',                height: 40,                width: 261.5,                zIndex: 99,                backgroundColor: '#022258',                borderRadius: 20,                marginBottom: 136,            }}>                <Text style={{                    alignSelf: 'center',                    color: '#ffffff',                    fontSize: sp(16.5),                    fontFamily: fonts.regular,                    textAlign: 'center',                }}>{'השליחה בוטלה'}</Text>            </Animated.View>),            footer: null,        }        modalAlert.showCancelAlert = showCancelAlert        modalAlert.funcPressScope = !showCancelAlert ? null : this.closeAlertModalHandle        modalAlert.styleWrap = !showCancelAlert ? null : {            position: 'absolute',            top: '50%',            right: '50%',            marginRight: -130.75,            height: 40,            width: 261.5,            flexDirection: 'column',            marginTop: -20,        }        if (showCancelAlert) {            Animated.timing(                fadeAnim,                {                    toValue: 1,                    duration: 600,                    useNativeDriver: true,                },            ).start(() => {                setTimeout(() => {                    Animated.timing(                        fadeAnim,                        {                            toValue: 0,                            duration: 300,                            useNativeDriver: true,                        },                    ).start(() => {                        this.closeAlertModal(true)                    })                }, 3000)            })        } else {            Animated.timing(                fadeAnim,                {                    toValue: 0,                    duration: 300,                    useNativeDriver: true,                },            ).start()        }        this.setState({            modalAlert,        }, () => {        })    }    changeTypeOfView = () => {        const {viewFoldersAsGrid} = this.state        this.setState({            viewFoldersAsGrid: !viewFoldersAsGrid,        })    }    openActionSheet = () => {        this.bottomActionSheet.show(() => {            console.log('callback - show')        })    }    onItemPress = (value) => {        if (value !== 'cancel') {            const {sorts} = this.state            const sortsSave = JSON.parse(JSON.stringify(sorts))            const item = sortsSave.find(it => it.val === value)            item.sortDown = !item.sortDown            this.setState({                sorts: sortsSave,                sortValue: item,            }, () => {                this.sortFolders(item)                console.log(item)            })        } else {            console.log(value)        }    }    onFileSortPress = (value) => {        if (value !== 'cancel') {            const {sortsFiles} = this.state            const sortsSave = JSON.parse(JSON.stringify(sortsFiles))            const item = sortsSave.find(it => it.val === value)            item.sortDown = !item.sortDown            this.setState({                sortsFiles: sortsSave,                sortFileValue: item,            }, () => {                this.sortFiles(item)                console.log(item)            })        } else {            console.log(value)        }    }    onChange = (value, index, values) => {    }    onHide = () => {        console.log('onHide')        if (this.bottomActionSheet) {            this.bottomActionSheet.hide(() => {                console.log('callback - hide')            })        }    }    sortFolders = (item) => {        const value = item.val        const sortDown = item.sortDown        let foldersState = JSON.parse(JSON.stringify(this.state.folders))        if (value === 'folderName') {            const isHebrew = foldersState.filter((it) => /[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)            const isEnglish = foldersState.filter((it) => /^[A-Za-z]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)            const isNumbers = foldersState.filter((it) => /^[0-9]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)            const isOthers = foldersState.filter((it) => !/^[A-Za-z]+$/.test(it.folderName) && !/^[0-9]+$/.test(it.folderName) && !/[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)            foldersState = isHebrew.concat(isEnglish, isNumbers, isOthers)            if (!sortDown) {                foldersState.reverse()            }            this.setState({                folders: foldersState,            })        } else if (value === 'lastUseDate') {            foldersState.sort((a, b) => a.lastUseDate - b.lastUseDate)            if (!sortDown) {                foldersState.reverse()            }            this.setState({                folders: foldersState,            })        } else if (value === 'dateCreated') {            foldersState.sort((a, b) => a.dateCreated - b.dateCreated)            if (!sortDown) {                foldersState.reverse()            }            this.setState({                folders: foldersState,            })        }    }    sortFiles = (item) => {        const value = item.val        const sortDown = item.sortDown        let filesState = JSON.parse(JSON.stringify(this.state.files))        if (value === 'name') {            const isHebrew = filesState.filter((it) => /[\u0590-\u05FF]/.test(it.name)).sort((a, b) => (a.name > b.name) ? 1 : -1)            const isEnglish = filesState.filter((it) => /^[A-Za-z]+$/.test(it.name)).sort((a, b) => (a.name > b.name) ? 1 : -1)            const isNumbers = filesState.filter((it) => /^[0-9]+$/.test(it.name)).sort((a, b) => (a.name > b.name) ? 1 : -1)            const isOthers = filesState.filter((it) => !/^[A-Za-z]+$/.test(it.name) && !/^[0-9]+$/.test(it.name) && !/[\u0590-\u05FF]/.test(it.name)).sort((a, b) => (a.name > b.name) ? 1 : -1)            filesState = isHebrew.concat(isEnglish, isNumbers, isOthers)            if (!sortDown) {                filesState.reverse()            }            this.setState({                files: filesState,            })        } else if (value === 'sendDate') {            filesState.sort((a, b) => a.sendDate - b.sendDate)            if (!sortDown) {                filesState.reverse()            }            this.setState({                files: filesState,            })        }    }    openActionSheetEdit = (folderEditItem) => () => {        this.setState({            folderEditItem,        }, () => {            setTimeout(() => {                this.bottomActionSheetEdit.show(() => {                    console.log('callback - show')                })            }, 20)        })    }    updateFolderName = () => {        if (this.state.folderItemForChange.folderName && this.state.folderItemForChange.folderName.toString().length > 0) {            this.handleCloseKeyboard()            const folderItemForChange = Object.assign({}, this.state.folderItemForChange)            folderItemForChange.error = false            this.setState({folderItemForChange})            updateFolderNameApi.post({                body: {                    'id': this.state.folderItemForChange.folderId,                    'name': this.state.folderItemForChange.folderName,                },            })                .then(() => {                    const foldersState = JSON.parse(JSON.stringify(this.state.folders))                    foldersState.find(it => it.folderId === this.state.folderItemForChange.folderId).folderName = this.state.folderItemForChange.folderName                    let folderNameList = []                    if (foldersState && foldersState.length) {                        const isHebrew = foldersState.filter((it) => /[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                        const isEnglish = foldersState.filter((it) => /^[A-Za-z]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                        const isNumbers = foldersState.filter((it) => /^[0-9]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                        const isOthers = foldersState.filter((it) => !/^[A-Za-z]+$/.test(it.folderName) && !/^[0-9]+$/.test(it.folderName) && !/[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                        folderNameList = isHebrew.concat(isEnglish, isNumbers, isOthers)                        folderNameList.forEach(fold => {                            fold.press = this.state.folderNameList.length ? this.state.folderNameList.some(fd => fd.folderId === fold.folderId && fd.press) : false                        })                    }                    this.setState({                        folderNameList,                        folders: foldersState,                        folderItemForChange: false,                    }, () => {                        this.sortFolders(this.state.sortValue)                        this.closeAlertModalHandle()                    })                })                .catch(() => {                })        } else {            const folderItemForChange = Object.assign({}, this.state.folderItemForChange)            folderItemForChange.error = true            this.setState({folderItemForChange})        }    }    createFolder = () => {        if (this.state.folderItemForChange.folderName && this.state.folderItemForChange.folderName.toString().length > 0) {            this.handleCloseKeyboard()            const folderItemForChange = Object.assign({}, this.state.folderItemForChange)            folderItemForChange.error = false            this.setState({folderItemForChange})            createFolderApi.post({                body: {                    'companyId': this.props.currentCompanyId,                    'folderName': this.state.folderItemForChange.folderName,                },            })                .then(() => {                    this.closeAlertModalHandle()                    this.getFolders()                })                .catch(() => {                })        } else {            const folderItemForChange = Object.assign({}, this.state.folderItemForChange)            folderItemForChange.error = true            this.setState({folderItemForChange})        }    }    handleSetRef = (ref) => {        this.inputRef = ref    }    onItemPressEdit = (value) => {        if (value !== 'cancel') {            if (value === 'changeFolderName' || value === 'createFolder') {                const folderEditItem = Object.assign({}, this.state.folderEditItem)                this.setState({                    folderItemForChange: value === 'changeFolderName' ? folderEditItem : {folderName: ''},                }, () => {                    const modalAlert = Object.assign({}, this.state.modalAlert)                    modalAlert.visible = true                    modalAlert.children = {                        header: (<View style={{                            height: 40,                            flexDirection: 'row-reverse',                            justifyContent: 'center',                            alignSelf: 'center',                        }}>                            <Text style={{                                paddingHorizontal: 20,                                paddingTop: 15,                                color: '#022258',                                fontSize: sp(18),                                fontFamily: fonts.semiBold,                                textAlign: 'center',                            }}>{value === 'changeFolderName' ? 'שינוי שם תיקייה' : 'יצירת תיקייה חדשה'}</Text>                        </View>),                        body: () => {                            return (                                <View style={{                                    flex: 1,                                    flexDirection: 'row-reverse',                                    justifyContent: 'center',                                    marginTop: 20,                                }}>                                    <View style={{                                        height: 28,                                        marginHorizontal: 22.5,                                        flexDirection: 'row-reverse',                                        borderBottomColor: !this.state.folderItemForChange.error ? '#022258' : 'red',                                        borderBottomWidth: 1,                                        flex: 1,                                    }}>                                        <TextInput                                            ref={this.handleSetRef}                                            blurOnSubmit                                            autoFocus                                            onBlur={this.handleCloseKeyboard}                                            onSubmitEditing={value === 'changeFolderName' ? this.updateFolderName : this.createFolder}                                            autoCorrect={false}                                            autoCapitalize="sentences"                                            returnKeyType="send"                                            keyboardType="default"                                            style={[{                                                direction: 'ltr',                                                textAlign: 'right',                                                flex: 1,                                                height: 28,                                                fontSize: sp(14),                                                color: colors.blue32,                                                fontFamily: fonts.regular,                                                paddingVertical: 1,                                                paddingHorizontal: 5,                                            }]}                                            placeholder={value === 'changeFolderName' ? 'שם התיקייה' : 'בחרו שם לתיקייה החדשה'}                                            placeholderTextColor={'#cac9c9'}                                            value={this.state.folderItemForChange.folderName}                                            multiline={false}                                            onEndEditing={(e) => {                                                this.handleCloseKeyboard()                                                const folderItemForChange = Object.assign({}, this.state.folderItemForChange)                                                folderItemForChange.folderName = e.nativeEvent.text                                                this.setState({folderItemForChange})                                            }}                                            onChangeText={(folderName) => {                                                console.log(folderName)                                                const folderItemForChange = Object.assign({}, this.state.folderItemForChange)                                                folderItemForChange.folderName = folderName                                                this.setState({folderItemForChange})                                            }}                                            underlineColorAndroid="rgba(0,0,0,0)"                                        />                                    </View>                                </View>)                        },                        footer: (                            <View style={{                                marginHorizontal: 20,                                height: 45,                                flexDirection: 'row-reverse',                                justifyContent: 'flex-end',                            }}>                                <TouchableOpacity                                    onPress={this.closeAlertModalHandle}                                    style={{                                        width: 65,                                    }}>                                    <Text style={{                                        color: '#038ed6',                                        fontSize: sp(18),                                        fontFamily: fonts.semiBold,                                    }}>                                        {'ביטול'}                                    </Text>                                </TouchableOpacity>                                <TouchableOpacity                                    onPress={value === 'changeFolderName' ? this.updateFolderName : this.createFolder}                                    style={{                                        width: 65,                                    }}>                                    <Text style={{                                        color: '#038ed6',                                        fontSize: sp(18),                                        fontFamily: fonts.semiBold,                                    }}>                                        {'אישור'}                                    </Text>                                </TouchableOpacity>                            </View>                        ),                    }                    modalAlert.styleWrap = {                        backgroundColor: 'white',                        borderRadius: 8,                        position: 'absolute',                        top: 127,                        right: '50%',                        marginRight: -160,                        height: 174.5,                        width: 320,                        flexDirection: 'column',                    }                    this.setState({                        modalAlert,                    })                })            } else if (value === 'deleteFolder') {                const folderEditItem = Object.assign({}, this.state.folderEditItem)                const modalAlert = Object.assign({}, this.state.modalAlert)                modalAlert.visible = true                modalAlert.children = {                    header: (<View style={{                        height: 40,                        borderBottomWidth: 1,                        borderBottomColor: '#022258',                        marginHorizontal: 22.5,                        flexDirection: 'column',                        justifyContent: 'center',                        alignItems: 'flex-end',                    }}>                        <Text style={{                            paddingHorizontal: 7,                            paddingTop: 7,                            color: '#022258',                            fontSize: sp(18),                            fontFamily: fonts.bold,                        }}>{'מחיקת תיקיה'}</Text>                    </View>),                    body: () => {                        return (                            <View style={{                                flex: 1,                                marginTop: 15,                                paddingHorizontal: 7,                            }}>                                <View style={{                                    marginHorizontal: 22.5,                                    flex: 1,                                    flexDirection: 'column',                                    justifyContent: 'flex-start',                                    alignItems: 'flex-end',                                }}>                                    <Text style={{                                        textAlign: 'right',                                        color: '#022258',                                        fontSize: sp(18),                                        fontFamily: fonts.regular,                                    }}>{'התיקיה '}<Text style={{                                        fontFamily: fonts.bold,                                    }}>{folderEditItem.folderName}</Text>{' והמסמכים שבתוכה ימחקו ללא אפשרות שחזור'}                                    </Text>                                </View>                            </View>)                    },                    footer: (                        <View style={{                            marginHorizontal: 20,                            height: 45,                            flexDirection: 'row-reverse',                            justifyContent: 'flex-end',                        }}>                            <TouchableOpacity                                onPress={this.closeAlertModalHandle}                                style={{                                    width: 65,                                }}>                                <Text style={{                                    color: '#038ed6',                                    fontSize: sp(18),                                    fontFamily: fonts.semiBold,                                }}>                                    {'ביטול'}                                </Text>                            </TouchableOpacity>                            <TouchableOpacity                                onPress={this.deleteFolder}                                style={{                                    width: 65,                                }}>                                <Text style={{                                    color: '#038ed6',                                    fontSize: sp(18),                                    fontFamily: fonts.semiBold,                                }}>                                    {'מחיקה'}                                </Text>                            </TouchableOpacity>                        </View>                    ),                }                modalAlert.styleWrap = {                    backgroundColor: 'white',                    borderRadius: 8,                    position: 'absolute',                    top: 127,                    right: '50%',                    marginRight: -160,                    height: 174.5,                    width: 320,                    flexDirection: 'column',                }                this.setState({                    modalAlert,                })            }        } else {            console.log(value)        }    }    deleteFolder = () => {        deleteFolderApi.post({            body: {                'uuid': this.state.folderEditItem.folderId,            },        })            .then(() => {                let foldersState = JSON.parse(JSON.stringify(this.state.folders))                foldersState = foldersState.filter(it => it.folderId !== this.state.folderEditItem.folderId)                let folderNameList = []                if (foldersState && foldersState.length) {                    const isHebrew = foldersState.filter((it) => /[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                    const isEnglish = foldersState.filter((it) => /^[A-Za-z]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                    const isNumbers = foldersState.filter((it) => /^[0-9]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                    const isOthers = foldersState.filter((it) => !/^[A-Za-z]+$/.test(it.folderName) && !/^[0-9]+$/.test(it.folderName) && !/[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)                    folderNameList = isHebrew.concat(isEnglish, isNumbers, isOthers)                    folderNameList.forEach(fold => {                        fold.press = this.state.folderNameList.length ? this.state.folderNameList.some(fd => fd.folderId === fold.folderId && fd.press) : false                    })                }                const arrFoldersIdsPressed = folderNameList.filter(fd => fd.press).map(fd => fd.folderId)                console.log('arrFoldersIds---', arrFoldersIdsPressed)                const fileSearchParams = Object.assign({}, this.state.fileSearchParams)                fileSearchParams.folderIds = arrFoldersIdsPressed                const modalAlert = Object.assign({}, this.state.modalAlert)                modalAlert.visible = false                modalAlert.children = {                    header: null,                    body: null,                    footer: null,                }                modalAlert.styleWrap = null                this.setState({                    fileSearchParams,                    folderNameList,                    folders: foldersState,                    modalAlert,                    folderEditItem: false,                }, () => {                })            })            .catch(() => {            })    }    onChangeEdit = (value, index, values) => {    }    onHideEdit = () => {        console.log('onHide')        if (this.bottomActionSheetEdit) {            this.bottomActionSheetEdit.hide(() => {                console.log('callback - bottomActionSheetEdit')                this.setState({                    folderEditItem: false,                })            })        } else {            this.setState({                folderEditItem: false,            })        }    }    openActionSheetFilesEdit = () => {        setTimeout(() => {            this.bottomActionSheetFileEdit.show(() => {                console.log('callback - show')            })        }, 20)    }    onHideFileEdit = () => {        console.log('onHide')        if (this.bottomActionSheetFileEdit) {            this.bottomActionSheetFileEdit.hide(() => {                console.log('callback - bottomActionSheetEdit')                // this.setState({                //   editFiles: false,                // })            })        } else {            // this.setState({            //   editFiles: false,            // })        }    }    onItemPressFilesEdit = (value) => {        if (value !== 'cancel') {            this.setState({                editFiles: value,            })        } else {            console.log(value)        }    }    handleCreateFolder = () => {        this.onItemPressEdit('createFolder')    }    closeStatusAlert = () => {        this.setState({            forLogic: null,        })        this.slide()    }    slide = () => {        Animated.timing(this.state.slide, {            toValue: 0,            duration: 200,            useNativeDriver: true,        }).start()    }    closeCalendarSheet = () => {        this.setState({            calendarSliderOpen: false,        })    }    openCalendarSliderSendDate = () => {        this.setState({            calendarSliderOpen: 'SendDate',        })    }    openCalendarSliderInvoiceDate = () => {        this.setState({            calendarSliderOpen: 'InvoiceDate',        })    }    openFilterSlider = () => {        this.setState({            filterSliderOpen: true,        })    }    closeFilterSheet = () => {        this.setState({            filterSliderOpen: false,        })    }    setItemsFilter = (folderNameList) => {        console.log(folderNameList)        const arrFoldersIdsPressed = folderNameList.filter(fd => fd.press).map(fd => fd.folderId)        console.log('arrFoldersIds---', arrFoldersIdsPressed)        const fileSearchParams = Object.assign({}, this.state.fileSearchParams)        fileSearchParams.folderIds = arrFoldersIdsPressed        this.setState({            folderNameList,            fileSearchParams,        }, () => {            console.log('fileSearchParams----', this.state.fileSearchParams)            this.fileSearch(this.state.fileSearchParams)        })    }    minDate = () => {        return null    }    handleSetDates = ({dateFromTimestamp, dateTillTimestamp}) => {        const fileSearchParams = Object.assign({}, this.state.fileSearchParams)        if (this.state.calendarSliderOpen === 'InvoiceDate') {            fileSearchParams.invoiceDateFrom = dateFromTimestamp            fileSearchParams.invoiceDateTill = dateTillTimestamp        } else if (this.state.calendarSliderOpen === 'SendDate') {            fileSearchParams.sendDateFrom = dateFromTimestamp            fileSearchParams.sendDateTill = dateTillTimestamp        }        this.setState({            fileSearchParams,        }, () => {            console.log('fileSearchParams----', this.state.fileSearchParams)            this.closeCalendarSheet()            this.fileSearch(this.state.fileSearchParams)        })    }    returnBackToFolders = () => {        this.setState({            showFilesScreen: false,            filesProgress: false,            folderSpecific: false,            refreshing: false,            files: [],            query: null,            fileSearchParams: {                'companyId': this.props.currentCompanyId,                'folderIds': [],                'invoiceDateFrom': null,                'invoiceDateTill': null,                'sendDateFrom': null,                'sendDateTill': null,                'text': null,                'pageSize': 50,                'pageNum': 0,            },        }, () => {        })    }    fileSearch = (params, updateLastUseDate) => {        if ((this.state.fileSearchParams.invoiceDateFrom !== null && this.state.fileSearchParams.invoiceDateTill !== null) || (this.state.fileSearchParams.sendDateFrom !== null && this.state.fileSearchParams.sendDateTill !== null) || this.state.fileSearchParams.folderIds.length > 0 || this.state.fileSearchParams.text !== null) {            this.setState({                showFilesScreen: true,                filesProgress: true,                editFiles: false,            })            fileSearchApi.post({                body: params,            })                .then(files => {                    if (files.content && files.content.length && params.folderIds.length === 1 && params.folderIds[0] === '11111111-1111-1111-1111-111111111111') {                        files.content.forEach((item) => {                            if (item.maamMonth) {                                const monthNames = LocaleConfig.locales.he.monthNames                                const dt = AppTimezone.moment(item.maamMonth).startOf('month')                                const pairEnd = AppTimezone.moment(dt).endOf('month').add(1, 'months')                                item.maamMonth = this.state.esderMaam !== 'TWO_MONTH' ? (monthNames[dt.month()] + ' ' + dt.format('YY')) : (                                    (dt.format('YY') === pairEnd.format('YY')) ? (monthNames[dt.month()] + ' - ' + monthNames[pairEnd.month()] + ' ' + dt.format('YY')) : ([monthNames[dt.month()] + ' ' + dt.format('YY'), monthNames[pairEnd.month()] + ' ' + pairEnd.format('YY')].join(' - '))                                )                            }                        })                    }                    const content = (files.number > 0) ? JSON.parse(JSON.stringify(this.state.files)).concat(files.content) : files.content                    const fileSearchParams = Object.assign({}, this.state.fileSearchParams)                    fileSearchParams.pageNum = files.number                    if ((this.state.fileSearchParams.invoiceDateFrom !== null && this.state.fileSearchParams.invoiceDateTill !== null) || (this.state.fileSearchParams.sendDateFrom !== null && this.state.fileSearchParams.sendDateTill !== null) || this.state.fileSearchParams.folderIds.length > 0 || this.state.fileSearchParams.text !== null) {                        console.log(files)                        this.setState({                            fileSearchParams,                            hideDeleteFilesOption: !this.state.folderSpecific ? this.state.folderNameList.filter(fd => fd.press).some(fd => fd.show === false) : this.state.folderSpecific.show === false,                            showFilesScreen: true,                            filesProgress: false,                            files: content,                            refreshing: false,                            endCursor: files.last,                            loadingMore: false,                        }, () => {                            if (this.state.files && this.state.files.length > 0) {                                this.sortFiles(this.state.sortFileValue)                            }                        })                        if (updateLastUseDate) {                            updateLastUseDateApi.post({                                body: {                                    'uuid': updateLastUseDate.folderId,                                },                            }).then((r) => {                                console.log(r)                            }).catch(error => {                                console.error('Error:', error)                            })                        }                    } else {                        this.handleCloseKeyboard()                        this.setState({                            showFilesScreen: false,                            filesProgress: false,                            folderSpecific: false,                            refreshing: false,                            files: [],                            query: null,                            fileSearchParams: {                                'companyId': this.props.currentCompanyId,                                'folderIds': [],                                'invoiceDateFrom': null,                                'invoiceDateTill': null,                                'sendDateFrom': null,                                'sendDateTill': null,                                'text': null,                                'pageSize': 50,                                'pageNum': 0,                            },                        })                    }                })                .catch((error) => {                    console.log(error)                    this.setState({                        showFilesScreen: true,                        filesProgress: false,                        refreshing: false,                        loadingMore: false,                        files: [],                    }, () => {                    })                })        } else {            this.setState({                showFilesScreen: false,                filesProgress: false,                folderSpecific: false,                refreshing: false,                files: [],                query: null,                fileSearchParams: {                    'companyId': this.props.currentCompanyId,                    'folderIds': [],                    'invoiceDateFrom': null,                    'invoiceDateTill': null,                    'sendDateFrom': null,                    'sendDateTill': null,                    'text': null,                    'pageSize': 50,                    'pageNum': 0,                },            })        }    }    handleDeleteSendDates = () => {        const fileSearchParams = Object.assign({}, this.state.fileSearchParams)        fileSearchParams.sendDateFrom = null        fileSearchParams.sendDateTill = null        this.setState({            fileSearchParams,        }, () => {            console.log('fileSearchParams----', this.state.fileSearchParams)            setTimeout(() => {                if (this.scrollViewTop && this.scrollViewTop._component) {                    if (this.props.isRtl) {                        this.scrollViewTop._component.scrollToEnd({animated: true})                    } else {                        this.scrollViewTop._component.scrollTo({animated: true, x: 0})                    }                }            }, IS_IOS ? 10 : 100)            if ((fileSearchParams.invoiceDateFrom && fileSearchParams.invoiceDateTill) || fileSearchParams.folderIds.length || fileSearchParams.text) {                this.fileSearch(this.state.fileSearchParams)            } else {                this.setState({                    showFilesScreen: false,                    folderSpecific: false,                    filesProgress: false,                    files: [],                })            }        })    }    handleDeleteInvoiceDates = () => {        const fileSearchParams = Object.assign({}, this.state.fileSearchParams)        fileSearchParams.invoiceDateFrom = null        fileSearchParams.invoiceDateTill = null        this.setState({            fileSearchParams,        }, () => {            console.log('fileSearchParams----', this.state.fileSearchParams)            setTimeout(() => {                if (this.scrollViewTop && this.scrollViewTop._component) {                    if (this.props.isRtl) {                        this.scrollViewTop._component.scrollToEnd({animated: true})                    } else {                        this.scrollViewTop._component.scrollTo({animated: true, x: 0})                    }                }            }, IS_IOS ? 10 : 100)            if ((fileSearchParams.sendDateFrom && fileSearchParams.sendDateTill) || fileSearchParams.folderIds.length || fileSearchParams.text) {                this.fileSearch(this.state.fileSearchParams)            } else {                this.setState({                    showFilesScreen: false,                    folderSpecific: false,                    filesProgress: false,                    files: [],                })            }        })    }    handleDeleteFolderId = (id) => () => {        const fileSearchParams = Object.assign({}, this.state.fileSearchParams)        fileSearchParams.folderIds = fileSearchParams.folderIds.filter(fd => fd !== id)        const folderNameList = JSON.parse(JSON.stringify(this.state.folderNameList))        folderNameList.find(fd => fd.folderId === id).press = false        this.setState({            fileSearchParams,            folderNameList,        }, () => {            console.log('fileSearchParams----', this.state.fileSearchParams)            setTimeout(() => {                if (this.scrollViewTop && this.scrollViewTop._component) {                    if (this.props.isRtl) {                        this.scrollViewTop._component.scrollToEnd({animated: true})                    } else {                        this.scrollViewTop._component.scrollTo({animated: true, x: 0})                    }                }            }, IS_IOS ? 10 : 100)            if ((fileSearchParams.invoiceDateFrom && fileSearchParams.invoiceDateTill) || (fileSearchParams.sendDateFrom && fileSearchParams.sendDateTill) || fileSearchParams.folderIds.length || fileSearchParams.text) {                this.fileSearch(this.state.fileSearchParams)            } else {                this.setState({                    showFilesScreen: false,                    filesProgress: false,                    files: [],                    folderSpecific: false,                })            }        })    }    getFolderName = (id) => {        const folder = this.state.folderNameList.find(fd => fd.folderId === id)        if (folder) {            return folder.folderName        }        return ''    }    disabledEditFiles = () => {        let files = JSON.parse(JSON.stringify(this.state.files))        files.forEach((it) => {            it.press = false        })        this.setState({            files,            fileSliderOpen: false,            editFiles: false,            selectFilesToEdit: [],        })    }    actionsCheckFiles = () => {        if (this.state.editFiles === 'transferFilesToAnotherFolder') {            this.setState({                editFilesShowFolderToTransfer: true,            })        } else if (this.state.editFiles === 'deleteFiles') {            this.deleteFiles()        }    }    closeFolderModal = () => {        this.setState({            editFilesShowFolderToTransfer: false,        })        this.disabledEditFiles()    }    sendChangeFileFolder = () => {        if (this.state.modalAlert.visible) {            console.log('send and close')            changeFileFolderApi.post({                body: this.state.modalAlert.params,            })                .then(() => {                    this.closeAlertModalHandle()                    this.disabledEditFiles()                    this.fileSearch(this.state.fileSearchParams)                })                .catch(() => {                    this.closeAlertModalHandle()                    this.disabledEditFiles()                })        } else {            changeFileFolderApi.post({                body: this.state.modalAlert.params,            })                .then(() => {                    this.disabledEditFiles()                    this.fileSearch(this.state.fileSearchParams)                })                .catch(() => {                    this.disabledEditFiles()                })            console.log('only send')        }    }    changeFileFolder = (folderToTransfer) => () => {        const selectFilesToEdit = this.state.selectFilesToEdit        let text =            (selectFilesToEdit.length === 1 ? 'המסמך' : (selectFilesToEdit.length + ' מסמכים')) +            (selectFilesToEdit.length === 1 ? ' עבר' : ' עברו') +            (' לתיקיית ')        const modalAlert = Object.assign({}, this.state.modalAlert)        modalAlert.visible = true        modalAlert.params = {            'fileIds': selectFilesToEdit.map(fd => fd.fileId),            'folder': folderToTransfer.folderId,        }        modalAlert.funcPressScope = this.sendChangeFileFolder        modalAlert.children = {            header: null,            body: (                <View style={{                    flex: 1,                    flexDirection: 'row-reverse',                    justifyContent: 'flex-start',                    marginTop: 20,                }}><Text style={{                    paddingHorizontal: 20,                    color: '#022258',                    fontSize: sp(18),                    fontFamily: fonts.regular,                    textAlign: 'right',                }}>{text}{'"'}<Text style={{                    fontFamily: fonts.semiBold,                }}>{folderToTransfer.folderName}</Text>{'"'}</Text></View>),            footer: (                <View style={{                    marginHorizontal: 20,                    height: 45,                    flexDirection: 'row-reverse',                    justifyContent: 'flex-end',                }}>                    <TouchableOpacity                        onPress={this.closeAlertModal}                        style={{                            width: 65,                        }}>                        <Text style={{                            color: '#038ed6',                            fontSize: sp(18),                            fontFamily: fonts.semiBold,                        }}>                            {'ביטול'}                        </Text>                    </TouchableOpacity>                </View>            ),        }        modalAlert.styleWrap = {            backgroundColor: 'white',            borderRadius: 8,            position: 'absolute',            top: 160,            right: '50%',            marginRight: -160,            height: 100,            width: 320,            flexDirection: 'column',        }        this.setState({            modalAlert,            editFilesShowFolderToTransfer: false,        }, () => {            setTimeout(() => {                if (this.state.modalAlert.visible && !this.state.modalAlert.showCancelAlert) {                    console.log('send')                    this.sendChangeFileFolder()                } else {                    this.disabledEditFiles()                    console.log('dont send')                }            }, 3000)        })    }    sendDeleteFiles = () => {        if (this.state.modalAlert.visible) {            console.log('send and close')            deleteFileApi.post({                body: this.state.modalAlert.params,            })                .then(() => {                    this.closeAlertModalHandle()                    this.disabledEditFiles()                    this.fileSearch(this.state.fileSearchParams)                })                .catch(() => {                    this.closeAlertModalHandle()                    this.disabledEditFiles()                })        } else {            deleteFileApi.post({                body: this.state.modalAlert.params,            })                .then(() => {                    this.disabledEditFiles()                    this.fileSearch(this.state.fileSearchParams)                })                .catch(() => {                    this.disabledEditFiles()                })            console.log('only send')        }    }    deleteFiles = () => {        const selectFilesToEdit = this.state.selectFilesToEdit        let text =            (selectFilesToEdit.length === 1 ? 'המסמך' : (selectFilesToEdit.length + ' מסמכים')) +            (selectFilesToEdit.length === 1 ? ' ימחק' : ' ימחקו') +            (' לצמיתות')        const modalAlert = Object.assign({}, this.state.modalAlert)        modalAlert.visible = true        modalAlert.params = {            'ids': selectFilesToEdit.map(fd => fd.fileId),        }        modalAlert.funcPressScope = this.sendDeleteFiles        modalAlert.children = {            header: null,            body: (                <View style={{                    flex: 1,                    flexDirection: 'row-reverse',                    justifyContent: 'flex-start',                    marginTop: 20,                }}><Text style={{                    paddingHorizontal: 20,                    color: '#022258',                    fontSize: sp(18),                    fontFamily: fonts.regular,                    textAlign: 'right',                }}>{text}</Text></View>),            footer: (                <View style={{                    marginHorizontal: 20,                    height: 45,                    flexDirection: 'row-reverse',                    justifyContent: 'flex-end',                }}>                    <TouchableOpacity                        onPress={this.closeAlertModal}                        style={{                            width: 65,                        }}>                        <Text style={{                            color: '#038ed6',                            fontSize: sp(18),                            fontFamily: fonts.semiBold,                        }}>                            {'ביטול'}                        </Text>                    </TouchableOpacity>                </View>            ),        }        modalAlert.styleWrap = {            backgroundColor: 'white',            borderRadius: 8,            position: 'absolute',            top: 160,            right: '50%',            marginRight: -160,            height: 100,            width: 320,            flexDirection: 'column',        }        this.setState({            modalAlert,            editFilesShowFolderToTransfer: false,        }, () => {            setTimeout(() => {                if (this.state.modalAlert.visible && !this.state.modalAlert.showCancelAlert) {                    console.log('send')                    this.sendDeleteFiles()                } else {                    this.disabledEditFiles()                    console.log('dont send')                }            }, 3000)        })    }    filesEmpty = () => {        return (            <View                style={{                    backgroundColor: 'white',                    flex: 1,                    position: 'relative',                    marginTop: 15,                }}                contentContainerStyle={[{                    flexGrow: 1,                    paddingTop: 0,                    paddingBottom: 0,                }]}>                <View style={commonStyles.horizontalCenterContainer}>                    <CustomIcon name="no-data" size={56} color={'#022258'} style={{marginTop: 15}}/>                    <Text style={{                        fontSize: sp(22),                        marginTop: 15,                        marginBottom: 18,                        color: '#022258',                        textAlign: 'center',                        fontFamily: fonts.semiBold,                    }}>                        {this.state.folderSpecific ? 'התיקיה ריקה' : 'לא נמצאו מסמכים לסינון המבוקש'}                    </Text>                </View>            </View>        )    }    foldersEmpty = () => {        return (            <View                style={{                    backgroundColor: 'white',                    flex: 1,                    position: 'relative',                    marginTop: 15,                }}                contentContainerStyle={[{                    flexGrow: 1,                    paddingTop: 0,                    paddingBottom: 0,                }]}>                <View style={commonStyles.horizontalCenterContainer}>                    <CustomIcon name="no-data" size={56} color={'#022258'} style={{marginTop: 15}}/>                    <Text style={{                        fontSize: sp(22),                        marginTop: 15,                        marginBottom: 18,                        color: '#022258',                        textAlign: 'center',                        fontFamily: fonts.semiBold,                    }}>                        {'לא נמצאו תיקיות'}                    </Text>                </View>            </View>        )    }    onHidePicker = () => {        console.log('onHide')        if (this.pickerSlider) {            this.pickerSlider.hide(() => {                console.log('callback - hide')            })        }        this.setState({            pickerSliderOpen: false,        })    }    openPickerSliderMaamMonth = () => {        this.setState({            pickerSliderOpen: true,        }, () => {            setTimeout(() => {                this.pickerSlider.show(() => {                    console.log('callback - show')                })            }, IS_IOS ? 10 : 100)        })    }    handleDeleteMaamMonth = () => {        const fileSearchParams = Object.assign({}, this.state.fileSearchParams)        fileSearchParams.maamMonth = null        this.setState({            fileSearchParams,        }, () => {            console.log('fileSearchParams----', this.state.fileSearchParams)            this.fileSearch(this.state.fileSearchParams)        })    }    handleSaveMaamMonth = () => {        const fileSearchParams = Object.assign({}, this.state.fileSearchParams)        const maamMonthObj = Object.assign({}, this.state.maamMonth)        fileSearchParams.maamMonth = AppTimezone.moment().set({            'year': Number(maamMonthObj.year),            'month': Number(maamMonthObj.month),            'date': 1,            'hour': 0,            'minute': 0,            'second': 0,            'millisecond': 0,        }).valueOf()        this.setState({            fileSearchParams,        }, () => {            console.log('fileSearchParams----', this.state.fileSearchParams)            this.onHidePicker()            this.fileSearch(this.state.fileSearchParams)        })    }    render() {        const {            t,            isRtl,            currentCompanyId,        } = this.props        const {            loadingMore,            endCursor,            refreshing,            query,            isLayoutComplete,            modalAlert,            folders,            sorts,            sortsFiles,            viewFoldersAsGrid,            sortValue,            sortFileValue,            folderEditItem,            forLogic,            slide,            calendarSliderOpen,            dateFromTimestamp,            dateTillTimestamp,            dateSendFromTimestamp,            dateSendTillTimestamp,            filterSliderOpen,            folderNameList,            fileSearchParams,            showFilesScreen,            filesProgress,            files,            folderSpecific,            hideDeleteFilesOption,            editFiles,            selectFilesToEdit,            editFilesShowFolderToTransfer,            fileSliderOpen,            pickerSliderOpen,            listOfYears,        } = this.state        if (!isLayoutComplete) {            return (<Loader overlay containerStyle={{backgroundColor: 'white'}}/>)        }        StatusBar.setBarStyle((IS_IOS) ? 'dark-content' : 'light-content', true)        let invoiceDates = null        let sendDates = null        let maamMonth = null        if (fileSearchParams) {            if (fileSearchParams.invoiceDateFrom && fileSearchParams.invoiceDateTill) {                invoiceDates = AppTimezone.moment(fileSearchParams.invoiceDateFrom).format('DD/MM/YY') + '-' + AppTimezone.moment(fileSearchParams.invoiceDateTill).format('DD/MM/YY')            }            if (fileSearchParams.sendDateFrom && fileSearchParams.sendDateTill) {                sendDates = AppTimezone.moment(fileSearchParams.sendDateFrom).format('DD/MM/YY') + '-' + AppTimezone.moment(fileSearchParams.sendDateTill).format('DD/MM/YY')            }            if (fileSearchParams.maamMonth) {                const monthNames = LocaleConfig.locales.he.monthNames                const dt = AppTimezone.moment(fileSearchParams.maamMonth).startOf('month')                maamMonth = (monthNames[dt.month()] + ' ' + dt.format('YY'))            }        }        return (            <Fragment>                <SafeAreaView                    onStartShouldSetResponder={this.containerTouched}                    style={{                        flex: 1,                        position: 'relative',                        flexGrow: 1,                        flexDirection: 'column',                        backgroundColor: 'white',                    }}>                    {forLogic && (                        <Animated.View style={{                            height: 47,                            backgroundColor: '#00205b',                            flexDirection: 'row',                            justifyContent: 'center',                            paddingHorizontal: 22.5,                            position: 'relative',                            alignItems: 'center',                            transform: [                                {                                    translateY: slide,                                },                            ],                        }}>                            <Text style={{                                textAlign: 'center',                                alignSelf: 'center',                                color: '#ffffff',                                fontSize: sp(18),                                fontFamily: fonts.bold,                            }}>{forLogic}</Text>                            <TouchableOpacity                                hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                onPress={this.closeStatusAlert}                                style={{                                    left: 15,                                    top: 10,                                    position: 'absolute',                                }}>                                <Icons                                    name="close"                                    size={26}                                    color={'#ffffff'}                                />                            </TouchableOpacity>                        </Animated.View>                    )}                    {!folderSpecific ? (                        <View style={{                            height: 42.5,                            flexDirection: 'row',                            justifyContent: 'center',                            marginHorizontal: 22.5,                        }}>                            <Text style={{                                textAlign: 'center',                                alignSelf: 'center',                                color: '#022258',                                fontSize: sp(24),                                fontFamily: fonts.semiBold,                            }}>ארכיון</Text>                        </View>                    ) : (                        <View style={{                            height: 35,                            marginVertical: 10,                            flexDirection: 'row',                            justifyContent: 'center',                            marginLeft: 22.5,                            marginRight: 10,                        }}>                            <TouchableOpacity                                hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                onPress={this.returnBackToFolders}                                style={{                                    right: 0,                                    top: 0,                                    position: 'absolute',                                }}>                                <Icon name="chevron-right" size={40} color={'#022258'}/>                            </TouchableOpacity>                            <Text style={{                                textAlign: 'center',                                alignSelf: 'center',                                color: '#022258',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}>{folderSpecific.folderName}</Text>                        </View>                    )}                    <View style={{                        height: 28,                        marginHorizontal: 22.5,                        flexDirection: 'row-reverse',                        borderBottomColor: '#022258',                        borderBottomWidth: 1,                    }}>                        <TextInput                            ref={this.handleSetRef}                            blurOnSubmit                            onBlur={this.handleCloseKeyboard}                            autoCorrect={false}                            autoCapitalize="sentences"                            returnKeyType="search"                            keyboardType="default"                            style={[{                                direction: 'ltr',                                textAlign: 'right',                                flex: 1,                                height: 28,                                fontSize: sp(14),                                color: colors.blue32,                                fontFamily: fonts.regular,                                paddingVertical: 1,                                paddingHorizontal: 5,                            }]}                            placeholder={'הקלידו שם ספק/שם לקוח/סכום'}                            placeholderTextColor={'#cac9c9'}                            value={query}                            multiline={false}                            onChangeText={this.handleChangeQuery}                            onSubmitEditing={this.handleSearch}                            onEndEditing={this.endEditing}                            underlineColorAndroid="rgba(0,0,0,0)"                        />                        <Image style={{width: 21, height: 21}}                               source={require('BiziboxUI/assets/searchIcon.png')}/>                    </View>                    <View style={{                        flex: 1,                        flexDirection: 'column',                    }}>                        <Fragment>                            <View style={{                                height: 35,                                flexDirection: 'row-reverse',                                justifyContent: 'space-between',                                alignItems: 'flex-end',                                alignContent: 'center',                                marginHorizontal: 20,                                marginRight: 22.5,                            }}>                                <TouchableOpacity                                    style={{                                        flexDirection: 'row-reverse',                                    }}                                    hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                    onPress={this.openActionSheet}>                                    <Text style={{                                        fontSize: sp(17.5),                                        color: '#022258',                                        fontFamily: fonts.regular,                                    }}>{!showFilesScreen ? sortValue.text : sortFileValue.text}</Text>                                    <CustomIcon                                        name={'arrow-ocr'}                                        size={12}                                        style={{                                            marginRight: 10,                                            transform: [{rotate: (!showFilesScreen ? sortValue.sortDown : sortFileValue.sortDown) ? '90deg' : '270deg'}],                                        }}                                        color={'#022258'}                                    />                                </TouchableOpacity>                                {showFilesScreen && files && files.length > 0 && (                                    <TouchableOpacity                                        hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                        onPress={this.openActionSheetFilesEdit}                                        style={{                                            alignSelf: 'flex-end',                                            marginTop: 10,                                        }}>                                        <Icon                                            iconStyle={{}}                                            name="dots-three-horizontal"                                            type="entypo"                                            size={30}                                            color={'#022258'}                                        />                                    </TouchableOpacity>                                )}                            </View>                            <View style={{                                height: 45,                                flexDirection: 'row-reverse',                                justifyContent: 'flex-start',                                alignItems: 'center',                                alignContent: 'center',                                paddingHorizontal: 20,                                borderBottomWidth: 1,                                borderBottomColor: '#022258',                            }}>                                <Animated.ScrollView                                    ref={scrollViewTop => (this.scrollViewTop = scrollViewTop)}                                    showsHorizontalScrollIndicator={false}                                    horizontal                                    contentContainerStyle={{                                        flexGrow: 1,                                        flexDirection: 'row-reverse',                                        alignSelf: 'flex-start',                                        zIndex: 999,                                        alignItems: 'flex-start',                                        alignContent: 'flex-start',                                        justifyContent: 'flex-start',                                        height: 40,                                        overflow: 'hidden',                                    }}                                >                                    <TouchableOpacity                                        hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                        style={{                                            height: 24,                                            backgroundColor: '#e7e7e7',                                            borderRadius: 12,                                            flexDirection: 'row-reverse',                                            alignItems: 'center',                                            alignContent: 'center',                                            justifyContent: 'center',                                            alignSelf: 'center',                                            paddingHorizontal: 8,                                            marginHorizontal: 5,                                        }}                                        onPress={this.openCalendarSliderSendDate}>                                        <Text style={{                                            color: '#022258',                                            fontSize: sp(14),                                            fontFamily: fonts.regular,                                        }}>                                            {'ת. שליחה'}                                        </Text>                                        <View style={{                                            marginTop: 2,                                        }}>                                            <Icons                                                name="chevron-down"                                                type="material-community"                                                size={16}                                                color={'#022258'}                                            />                                        </View>                                    </TouchableOpacity>                                    {sendDates && (                                        <TouchableOpacity                                            style={{                                                height: 24,                                                backgroundColor: '#022258',                                                borderRadius: 12,                                                flexDirection: 'row-reverse',                                                alignItems: 'center',                                                alignContent: 'center',                                                justifyContent: 'center',                                                alignSelf: 'center',                                                paddingHorizontal: 8,                                                marginHorizontal: 5,                                            }}                                            onPress={this.handleDeleteSendDates}                                        >                                            <Text style={{                                                color: '#ffffff',                                                fontSize: sp(14),                                                fontFamily: fonts.regular,                                            }}>                                                {sendDates}                                            </Text>                                            <View style={{                                                marginTop: 2,                                                marginRight: 3,                                            }}>                                                <Icons                                                    name="close"                                                    type="material-community"                                                    size={14}                                                    color={'#ffffff'}                                                />                                            </View>                                        </TouchableOpacity>                                    )}                                    <TouchableOpacity                                        hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                        style={{                                            height: 24,                                            backgroundColor: '#e7e7e7',                                            borderRadius: 12,                                            flexDirection: 'row-reverse',                                            alignItems: 'center',                                            alignContent: 'center',                                            justifyContent: 'center',                                            alignSelf: 'center',                                            paddingHorizontal: 8,                                            marginHorizontal: 5,                                        }}                                        onPress={this.openCalendarSliderInvoiceDate}                                    >                                        <Text style={{                                            color: '#022258',                                            fontSize: sp(14),                                            fontFamily: fonts.regular,                                        }}>                                            {'ת. מסמך'}                                        </Text>                                        <View style={{                                            marginTop: 2,                                        }}>                                            <Icons                                                name="chevron-down"                                                type="material-community"                                                size={16}                                                color={'#022258'}                                            />                                        </View>                                    </TouchableOpacity>                                    {invoiceDates && (                                        <TouchableOpacity                                            style={{                                                height: 24,                                                backgroundColor: '#022258',                                                borderRadius: 12,                                                flexDirection: 'row-reverse',                                                alignItems: 'center',                                                alignContent: 'center',                                                justifyContent: 'center',                                                alignSelf: 'center',                                                paddingHorizontal: 8,                                                marginHorizontal: 5,                                            }}                                            onPress={this.handleDeleteInvoiceDates}                                        >                                            <Text style={{                                                color: '#ffffff',                                                fontSize: sp(14),                                                fontFamily: fonts.regular,                                            }}>                                                {invoiceDates}                                            </Text>                                            <View style={{                                                marginTop: 2,                                                marginRight: 3,                                            }}>                                                <Icons                                                    name="close"                                                    type="material-community"                                                    size={14}                                                    color={'#ffffff'}                                                />                                            </View>                                        </TouchableOpacity>                                    )}                                    {this.state.fileSearchParams.folderIds[0] === '11111111-1111-1111-1111-111111111111' && (                                        <Fragment>                                            <TouchableOpacity                                                hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                                style={{                                                    height: 24,                                                    backgroundColor: '#e7e7e7',                                                    borderRadius: 12,                                                    flexDirection: 'row-reverse',                                                    alignItems: 'center',                                                    alignContent: 'center',                                                    justifyContent: 'center',                                                    alignSelf: 'center',                                                    paddingHorizontal: 8,                                                    marginHorizontal: 5,                                                }}                                                onPress={this.openPickerSliderMaamMonth}                                            >                                                <Text style={{                                                    color: '#022258',                                                    fontSize: sp(14),                                                    fontFamily: fonts.regular,                                                }}>                                                    {'חודשי מע"מ'}                                                </Text>                                                <View style={{                                                    marginTop: 2,                                                }}>                                                    <Icons                                                        name="chevron-down"                                                        type="material-community"                                                        size={16}                                                        color={'#022258'}                                                    />                                                </View>                                            </TouchableOpacity>                                            {maamMonth && (                                                <TouchableOpacity                                                    style={{                                                        height: 24,                                                        backgroundColor: '#022258',                                                        borderRadius: 12,                                                        flexDirection: 'row-reverse',                                                        alignItems: 'center',                                                        alignContent: 'center',                                                        justifyContent: 'center',                                                        alignSelf: 'center',                                                        paddingHorizontal: 8,                                                        marginHorizontal: 5,                                                    }}                                                    onPress={this.handleDeleteMaamMonth}                                                >                                                    <Text style={{                                                        color: '#ffffff',                                                        fontSize: sp(14),                                                        fontFamily: fonts.regular,                                                    }}>                                                        {maamMonth}                                                    </Text>                                                    <View style={{                                                        marginTop: 2,                                                        marginRight: 3,                                                    }}>                                                        <Icons                                                            name="close"                                                            type="material-community"                                                            size={14}                                                            color={'#ffffff'}                                                        />                                                    </View>                                                </TouchableOpacity>                                            )}                                        </Fragment>                                    )}                                    {!folderSpecific && (                                        <Fragment>                                            <TouchableOpacity                                                hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                                style={{                                                    height: 24,                                                    backgroundColor: '#e7e7e7',                                                    borderRadius: 12,                                                    flexDirection: 'row-reverse',                                                    alignItems: 'center',                                                    alignContent: 'center',                                                    justifyContent: 'center',                                                    alignSelf: 'center',                                                    paddingHorizontal: 8,                                                    marginHorizontal: 5,                                                }}                                                onPress={this.openFilterSlider}                                            >                                                <Text style={{                                                    color: '#022258',                                                    fontSize: sp(14),                                                    fontFamily: fonts.regular,                                                }}>                                                    {'שם התיקייה'}                                                </Text>                                                <View style={{                                                    marginTop: 2,                                                }}>                                                    <Icons                                                        name="chevron-down"                                                        type="material-community"                                                        size={16}                                                        color={'#022258'}                                                    />                                                </View>                                            </TouchableOpacity>                                            {fileSearchParams && fileSearchParams.folderIds.length > 0 && fileSearchParams.folderIds.map((id) => {                                                return (                                                    <TouchableOpacity                                                        key={id.toString()}                                                        style={{                                                            height: 24,                                                            backgroundColor: '#022258',                                                            borderRadius: 12,                                                            flexDirection: 'row-reverse',                                                            alignItems: 'center',                                                            alignContent: 'center',                                                            justifyContent: 'center',                                                            alignSelf: 'center',                                                            paddingHorizontal: 8,                                                            marginHorizontal: 5,                                                        }}                                                        onPress={this.handleDeleteFolderId(id)}                                                    >                                                        <Text style={{                                                            color: '#ffffff',                                                            fontSize: sp(14),                                                            fontFamily: fonts.regular,                                                        }}>                                                            {this.getFolderName(id)}                                                        </Text>                                                        <View style={{                                                            marginTop: 2,                                                            marginRight: 3,                                                        }}>                                                            <Icons                                                                name="close"                                                                type="material-community"                                                                size={14}                                                                color={'#ffffff'}                                                            />                                                        </View>                                                    </TouchableOpacity>                                                )                                            })}                                        </Fragment>                                    )}                                </Animated.ScrollView>                            </View>                            {!showFilesScreen ? (                                <Fragment>                                    <View style={{                                        height: 45,                                        flexDirection: 'row-reverse',                                        justifyContent: 'flex-end',                                        alignItems: 'center',                                        alignContent: 'center',                                        marginHorizontal: 20,                                    }}>                                        <TouchableOpacity                                            hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                            onPress={this.changeTypeOfView}>                                            <CustomIcon                                                name={viewFoldersAsGrid ? 'display' : 'list'}                                                size={24}                                                color={'#022258'}/>                                        </TouchableOpacity>                                    </View>                                    {(folders === undefined) && (                                        <View style={{                                            flex: 1,                                            justifyContent: 'center',                                            alignItems: 'center',                                        }}><ActivityIndicator color="#999999"/></View>)}                                    {(folders !== undefined) && (                                        <Fragment>                                            <FlatList                                                refreshControl={                                                    <RefreshControl                                                        refreshing={refreshing}                                                        onRefresh={this._onRefresh}                                                    />                                                }                                                extraData={refreshing}                                                showsVerticalScrollIndicator={false}                                                style={{                                                    marginHorizontal: 20,                                                }}                                                contentStyle={{                                                    flex: 1,                                                    justifyContent: 'flex-end',                                                    alignItems: 'center',                                                }}                                                horizontal={false}                                                scrollEventThrottle={IS_IOS ? 16 : 1}                                                data={(!viewFoldersAsGrid) ? folders : this.formatRow(folders, 2)}                                                renderItem={this.renderFolder}                                                keyExtractor={(item, index) => `${item.folderId}_${index}`}                                                bounces                                                bouncesZoom                                                initialNumToRender={20}                                                enableOnAndroid={false}                                                removeClippedSubviews                                                key={viewFoldersAsGrid}                                                numColumns={(!viewFoldersAsGrid) ? 1 : 2}                                                ItemSeparatorComponent={!viewFoldersAsGrid ? null : this.renderSeparatorView}                                                ListEmptyComponent={!refreshing ? this.foldersEmpty : null}                                            />                                            <ActionButton                                                position={'left'}                                                offsetY={25}                                                onPress={this.handleCreateFolder}                                                bgColor="#ffffffbf"                                                buttonColor="#022258"                                                size={54}                                                spacing={0}                                                buttonTextStyle={{                                                    fontSize: 54,                                                    lineHeight:54,                                                    textAlign: 'center',                                                    marginTop: (IS_IOS ? -6 : 3),                                                }}                                            />                                            <View style={{                                                height: 'auto',                                                flexDirection: 'row-reverse',                                                position: 'absolute',                                                bottom: 10,                                                right: 20,                                            }}>                                                <Text                                                    onPress={() => {                                                        Linking.canOpenURL('https://bizibox.biz/terms-of-use-scanning-app/')                                                            .then(s => {                                                                if (s) {                                                                    Linking.openURL('https://bizibox.biz/terms-of-use-scanning-app/')                                                                }                                                            })                                                    }}                                                    style={{                                                        color: '#2aa1d9',                                                        fontSize: sp(15),                                                        textAlign: 'right',                                                        fontFamily: fonts.regular,                                                    }}>{'תנאי שימוש'}</Text>                                                <Text style={{                                                    color: '#2aa1d9',                                                    fontSize: sp(15),                                                    textAlign: 'right',                                                    fontFamily: fonts.regular,                                                    paddingHorizontal: 5,                                                }}>{'|'}</Text>                                                <Text                                                    onPress={() => {                                                        Linking.canOpenURL('https://bizibox.biz/privacy-policy-scanning-app/')                                                            .then(s => {                                                                if (s) {                                                                    Linking.openURL('https://bizibox.biz/privacy-policy-scanning-app/')                                                                }                                                            })                                                    }}                                                    style={{                                                        color: '#2aa1d9',                                                        fontSize: sp(15),                                                        textAlign: 'right',                                                        fontFamily: fonts.regular,                                                    }}>{'מדיניות פרטיות'}</Text>                                            </View>                                        </Fragment>                                    )}                                </Fragment>                            ) : (                                <Fragment>                                    {(filesProgress) && (                                        <View style={{                                            flex: 1,                                            justifyContent: 'center',                                            alignItems: 'center',                                        }}><ActivityIndicator color="#999999"/></View>)}                                    <FlatList                                        refreshControl={                                            <RefreshControl                                                refreshing={refreshing}                                                onRefresh={this._onRefresh}                                            />                                        }                                        extraData={refreshing}                                        showsVerticalScrollIndicator={false}                                        style={{                                            marginHorizontal: 10,                                        }}                                        contentStyle={{                                            flex: 1,                                            justifyContent: 'flex-end',                                            alignItems: 'center',                                        }}                                        horizontal={false}                                        scrollEventThrottle={IS_IOS ? 16 : 1}                                        data={files && files.length > 0 ? files : []}                                        renderItem={this.renderFile}                                        keyExtractor={(item, idx) => `${item.fileId}_${idx}`}                                        bounces                                        bouncesZoom                                        initialNumToRender={20}                                        enableOnAndroid={false}                                        removeClippedSubviews                                        ItemSeparatorComponent={this.renderSeparatorLine}                                        ListEmptyComponent={!refreshing && !filesProgress ? this.filesEmpty : null}                                        onEndReachedThreshold={0.01}                                        ListFooterComponent={() => (loadingMore && !endCursor) ?                                            <ActivityIndicator color="#999999"/> : null}                                        onEndReached={(distanceFromEnd) => {                                            if (!loadingMore && !endCursor) {                                                const fileSearchParams = Object.assign({}, this.state.fileSearchParams)                                                fileSearchParams.pageNum++                                                this.setState({loadingMore: true, fileSearchParams}, () => {                                                    console.log('onEndReached', distanceFromEnd)                                                    this.fileSearch(this.state.fileSearchParams)                                                })                                            }                                        }}                                    />                                    {editFiles && (                                        <View style={{                                            height: 46,                                            backgroundColor: 'white',                                            flexDirection: 'row-reverse',                                            justifyContent: 'space-between',                                            shadowColor: '#dbdbdb',                                            shadowOpacity: 1,                                            shadowOffset: {width: 0, height: -4},                                            elevation: 4,                                            position: 'absolute',                                            bottom: 0,                                            zIndex: 99999,                                            right: 0,                                            left: 0,                                            alignItems: 'center',                                            paddingHorizontal: 15,                                        }}>                                            <TouchableOpacity                                                hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                                onPress={this.disabledEditFiles}>                                                <Text style={{                                                    fontSize: sp(18),                                                    color: '#022258',                                                    fontFamily: fonts.regular,                                                }}>{'ביטול'}</Text>                                            </TouchableOpacity>                                            {selectFilesToEdit.length === 0 ? (                                                <View style={{                                                    opacity: 0.4,                                                }}>                                                    <Text style={{                                                        fontSize: sp(18),                                                        color: '#022258',                                                        fontFamily: fonts.regular,                                                    }}>{editFiles === 'deleteFiles' ? 'מחיקה לצמיתות' : 'בחירת תיקיה'}</Text>                                                </View>                                            ) : (                                                <TouchableOpacity                                                    hitSlop={{top: 10, bottom: 10, left: 10, right: 10}}                                                    onPress={this.actionsCheckFiles}>                                                    <Text style={{                                                        fontSize: sp(18),                                                        color: '#022258',                                                        fontFamily: fonts.regular,                                                    }}>{editFiles === 'deleteFiles' ? 'מחיקה לצמיתות' : 'בחירת תיקיה'}</Text>                                                </TouchableOpacity>                                            )}                                        </View>                                    )}                                </Fragment>                            )}                        </Fragment>                        <Modal                            animationType="none"                            transparent                            visible={modalAlert && modalAlert.visible}>                            <TouchableOpacity                                onStartShouldSetResponder={this.containerTouched}                                activeOpacity={modalAlert.funcPressScope ? 0.9 : 1}                                onPress={modalAlert.funcPressScope}                                style={{                                    flex: 1,                                    backgroundColor: modalAlert.showCancelAlert ? 'transparent' : 'rgba(0,0,0,0.75)',                                }}>                                <TouchableOpacity style={modalAlert.styleWrap ? modalAlert.styleWrap : {}}                                                  onPress={null}                                                  activeOpacity={1}>                                    {modalAlert.children.header}                                    {modalAlert.children.body ? (typeof (modalAlert.children.body) === 'function' ? modalAlert.children.body() : modalAlert.children.body) : null}                                    {modalAlert.children.footer}                                </TouchableOpacity>                            </TouchableOpacity>                        </Modal>                    </View>                    {(folders && editFilesShowFolderToTransfer) && (                        <Folders                            navigation={this.props.navigation}                            companyId={currentCompanyId}                            changeFileFolder={this.changeFileFolder}                            getFolders={this.getFolders}                            closeFolderModal={this.closeFolderModal}                            folders={folders}                        />                    )}                    <FilterSlider                        navigation={this.props.navigation}                        folderNameList={folderNameList}                        closeFilterSheet={this.closeFilterSheet}                        isOpen={filterSliderOpen}                        setItemsFilter={this.setItemsFilter}                    />                    <CalendarSlider                        t={t}                        navigation={this.props.navigation}                        isRtl={isRtl}                        closeCalendarSheet={this.closeCalendarSheet}                        isOpen={calendarSliderOpen}                        minDate={this.minDate()}                        dateFromTimestamp={calendarSliderOpen && calendarSliderOpen === 'InvoiceDate' ? dateFromTimestamp : dateSendFromTimestamp}                        dateTillTimestamp={calendarSliderOpen && calendarSliderOpen === 'InvoiceDate' ? dateTillTimestamp : dateSendTillTimestamp}                        onSetDates={this.handleSetDates}                    />                    <FileSlider                        bottomActionSheet={this.bottomActionSheetShow}                        isRtl={isRtl}                        setFileImgs={this.setFileImgs}                        navigation={this.props.navigation}                        closeBottomSlideFile={this.closeBottomSlideFile}                        file={fileSliderOpen}                    />                    {pickerSliderOpen && (                        <ActionSheet                            showSeparator={false}                            showSparator={false}                            style={{                                paddingHorizontal: 20,                                flex: 1,                                zIndex: 999999,                                elevation: 999,                                position: 'absolute',                                borderTopLeftRadius: 20,                                borderTopRightRadius: 20,                            }}                            ref={(actionSheet) => {                                this.pickerSlider = actionSheet                            }}                            position="bottom"                            onChange={this.onChange}                            onHide={this.onHidePicker}                            multiple                            showSelectedIcon={false}>                            <View style={{                                height: 313,                                marginBottom: 20,                            }}>                                <View style={{                                    flexDirection: 'row-reverse',                                    justifyContent: 'space-between',                                    alignItems: 'center',                                    marginBottom: 8,                                    paddingHorizontal: 15,                                    paddingBottom: 5,                                    height: 60,                                    // backgroundColor: 'white',                                    // borderTopLeftRadius: 12,                                    // borderTopRightRadius: 12,                                }}>                                    <View>                                        <TouchableOpacity                                            hitSlop={{top: 20, bottom: 20, left: 20, right: 20}}                                            onPress={this.handleSaveMaamMonth}>                                            <Text style={{                                                color: '#2aa1d9',                                                fontSize: sp(15),                                                fontFamily: fonts.regular,                                            }}>                                                {'שמירה'}                                            </Text>                                        </TouchableOpacity>                                    </View>                                    <View>                                        <Text style={{                                            color: '#022258',                                            fontSize: sp(16),                                            fontFamily: fonts.regular,                                        }}>                                            {'סינון לפי חודשי מע״מ'}                                        </Text>                                    </View>                                    <View>                                        <TouchableOpacity                                            hitSlop={{top: 20, bottom: 20, left: 20, right: 20}}                                            onPress={this.onHidePicker}>                                            <Text style={{                                                color: '#2aa1d9',                                                fontSize: sp(15),                                                fontFamily: fonts.regular,                                            }}>                                                {'ביטול'}                                            </Text>                                        </TouchableOpacity>                                    </View>                                </View>                                <View style={{                                    flex: 1,                                    position: 'relative',                                    marginHorizontal: 15,                                }}>                                    <View style={{                                        flexDirection: 'row-reverse',                                        alignSelf: 'center',                                        justifyContent: 'center',                                        alignItems: 'center',                                        alignContent: 'center',                                        zIndex: 9,                                        elevation: 9,                                        paddingHorizontal: 15,                                        marginTop: IS_IOS ? 0 : 83,                                    }}>                                        <View style={{                                            flex: 1,                                            elevation: 3,                                        }}>                                            <Picker                                                mode={'dropdown'}                                                selectedValue={String(this.state.maamMonth.month)}                                                style={{                                                    height: 50,                                                    minWidth: 100,                                                    elevation: 3,                                                    color: '#022258',                                                    fontSize: sp(16),                                                    fontFamily: fonts.regular,                                                }}                                                onValueChange={(itemValue, itemIndex) => {                                                    const maamMonthObj = Object.assign({}, this.state.maamMonth)                                                    if (Number(maamMonthObj.year) === AppTimezone.moment().get('year') && Number(itemValue) > AppTimezone.moment().get('month')) {                                                        maamMonthObj.month = AppTimezone.moment().get('month')                                                    } else {                                                        maamMonthObj.month = Number(itemValue)                                                    }                                                    this.setState({maamMonth: maamMonthObj})                                                }}>                                                {(LocaleConfig.locales.he.monthNames).map((name, idx) => {                                                    return (<Picker.Item key={name} label={name} value={String(idx)}                                                                         color={'#022258'}/>)                                                })}                                            </Picker>                                        </View>                                        <View style={{                                            flex: 1,                                            elevation: 3,                                        }}>                                            <Picker                                                mode={'dropdown'}                                                selectedValue={String(this.state.maamMonth.year)}                                                style={{                                                    height: 50,                                                    minWidth: 100,                                                    elevation: 3,                                                    color: '#022258',                                                    fontSize: sp(16),                                                    fontFamily: fonts.regular,                                                }}                                                onValueChange={(itemValue, itemIndex) => {                                                    const maamMonthObj = Object.assign({}, this.state.maamMonth)                                                    maamMonthObj.year = Number(itemValue)                                                    if (maamMonthObj.year === AppTimezone.moment().get('year') && Number(maamMonthObj.month) > AppTimezone.moment().get('month')) {                                                        maamMonthObj.month = AppTimezone.moment().get('month')                                                    }                                                    this.setState({maamMonth: maamMonthObj})                                                }}>                                                {listOfYears.map((name, idx) => {                                                    return (<Picker.Item key={name} label={name} value={name}                                                                         color={'#022258'}/>)                                                })}                                            </Picker>                                        </View>                                    </View>                                </View>                            </View>                        </ActionSheet>                    )}                </SafeAreaView>                {!showFilesScreen ? (                    <ActionSheet                        showSeparator={false}                        showSparator={false}                        style={{                            paddingHorizontal: 22.5,                            flex: 1,                            zIndex: 999999,                            elevation: 999,                            position: 'absolute',                            borderTopLeftRadius: 0,                            borderTopRightRadius: 0,                        }}                        ref={(actionSheet) => {                            this.bottomActionSheet = actionSheet                        }}                        position="bottom"                        onChange={this.onChange}                        onHide={this.onHide}                        multiple                        showSelectedIcon={false}                    >                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'שם תיקייה'}                            value={'folderName'}                            icon={                                <CustomIcon                                    name={'arrow-ocr'}                                    size={12}                                    style={{                                        transform: [{rotate: sorts[0].sortDown ? '90deg' : '270deg'}],                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPress}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'בשימוש נפוץ'}                            value={'lastUseDate'}                            icon={                                <CustomIcon                                    name={'arrow-ocr'}                                    size={12}                                    style={{                                        transform: [{rotate: sorts[1].sortDown ? '90deg' : '270deg'}],                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPress}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'פתיחה אחרונה'}                            value={'dateCreated'}                            icon={                                <CustomIcon                                    name={'arrow-ocr'}                                    size={12}                                    style={{                                        transform: [{rotate: sorts[2].sortDown ? '90deg' : '270deg'}],                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPress}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'ביטול'}                            value={'cancel'}                            icon={                                <CustomIcon                                    name={'times'}                                    size={12}                                    style={{                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPress}                        />                    </ActionSheet>                ) : (                    <ActionSheet                        showSeparator={false}                        showSparator={false}                        style={{                            paddingHorizontal: 22.5,                            flex: 1,                            zIndex: 999999,                            elevation: 999,                            position: 'absolute',                            borderTopLeftRadius: 0,                            borderTopRightRadius: 0,                        }}                        ref={(actionSheet) => {                            this.bottomActionSheet = actionSheet                        }}                        position="bottom"                        onChange={this.onChange}                        onHide={this.onHide}                        multiple                        showSelectedIcon={false}                    >                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'שם'}                            value={'name'}                            icon={                                <CustomIcon                                    name={'arrow-ocr'}                                    size={12}                                    style={{                                        transform: [{rotate: sortsFiles[0].sortDown ? '90deg' : '270deg'}],                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onFileSortPress}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'תאריך שליחה'}                            value={'sendDate'}                            icon={                                <CustomIcon                                    name={'arrow-ocr'}                                    size={12}                                    style={{                                        transform: [{rotate: sortsFiles[1].sortDown ? '90deg' : '270deg'}],                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onFileSortPress}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'ביטול'}                            value={'cancel'}                            icon={                                <CustomIcon                                    name={'times'}                                    size={12}                                    style={{                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onFileSortPress}                        />                    </ActionSheet>                )}                {folderEditItem && folderEditItem.deletable ? (                    <ActionSheet                        showSeparator={false}                        showSparator={false}                        style={{                            paddingHorizontal: 22.5,                            flex: 1,                            zIndex: 999999,                            elevation: 999,                            position: 'absolute',                            borderTopLeftRadius: 0,                            borderTopRightRadius: 0,                        }}                        ref={(actionSheet) => {                            this.bottomActionSheetEdit = actionSheet                        }}                        position="bottom"                        onChange={this.onChangeEdit}                        onHide={this.onHideEdit}                        multiple                        showSelectedIcon={false}                    >                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'שינוי שם תיקייה'}                            value={'changeFolderName'}                            icon={                                <CustomIcon                                    name={'tag'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 3,                                        right: -25,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressEdit}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'מחיקת תיקייה'}                            value={'deleteFolder'}                            icon={                                <CustomIcon                                    name={'trash-ocr'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 1,                                        right: -26,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressEdit}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'ביטול'}                            value={'cancel'}                            icon={                                <CustomIcon                                    name={'times'}                                    size={12}                                    style={{                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressEdit}                        />                    </ActionSheet>                ) : (                    <ActionSheet                        showSeparator={false}                        showSparator={false}                        style={{                            paddingHorizontal: 22.5,                            flex: 1,                            zIndex: 999999,                            elevation: 999,                            position: 'absolute',                            borderTopLeftRadius: 0,                            borderTopRightRadius: 0,                        }}                        ref={(actionSheet) => {                            this.bottomActionSheetEdit = actionSheet                        }}                        position="bottom"                        onChange={this.onChangeEdit}                        onHide={this.onHideEdit}                        multiple                        showSelectedIcon={false}                    >                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'שינוי שם תיקייה'}                            value={'changeFolderName'}                            icon={                                <CustomIcon                                    name={'tag'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 3,                                        right: -25,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressEdit}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'ביטול'}                            value={'cancel'}                            icon={                                <CustomIcon                                    name={'times'}                                    size={12}                                    style={{                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressEdit}                        />                    </ActionSheet>                )}                {!hideDeleteFilesOption ? (                    <ActionSheet                        showSeparator={false}                        showSparator={false}                        style={{                            paddingHorizontal: 22.5,                            flex: 1,                            zIndex: 9999999,                            elevation: 9999,                            position: 'absolute',                            borderTopLeftRadius: 0,                            borderTopRightRadius: 0,                        }}                        ref={(actionSheet) => {                            this.bottomActionSheetFileEdit = actionSheet                        }}                        position="bottom"                        onHide={this.onHideFileEdit}                        multiple                        showSelectedIcon={false}                    >                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'העברת מסמכים לתיקייה אחרת'}                            value={'transferFilesToAnotherFolder'}                            icon={                                <CustomIcon                                    name={'next'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 3,                                        right: -25,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressFilesEdit}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'מחיקת מסמכים'}                            value={'deleteFiles'}                            icon={                                <CustomIcon                                    name={'trash-ocr'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 1,                                        right: -26,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressFilesEdit}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'ביטול'}                            value={'cancel'}                            icon={                                <CustomIcon                                    name={'times'}                                    size={12}                                    style={{                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressFilesEdit}                        />                    </ActionSheet>                ) : (                    <ActionSheet                        showSeparator={false}                        showSparator={false}                        style={{                            paddingHorizontal: 22.5,                            flex: 1,                            zIndex: 9999999,                            elevation: 9999,                            position: 'absolute',                            borderTopLeftRadius: 0,                            borderTopRightRadius: 0,                        }}                        ref={(actionSheet) => {                            this.bottomActionSheetFileEdit = actionSheet                        }}                        position="bottom"                        onHide={this.onHideFileEdit}                        multiple                        showSelectedIcon={false}                    >                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'העברת מסמכים לתיקייה אחרת'}                            value={'transferFilesToAnotherFolder'}                            icon={                                <CustomIcon                                    name={'next'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 3,                                        right: -25,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressFilesEdit}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'ביטול'}                            value={'cancel'}                            icon={                                <CustomIcon                                    name={'times'}                                    size={12}                                    style={{                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressFilesEdit}                        />                    </ActionSheet>                )}                {fileSliderOpen && !fileSliderOpen.details ? (                    <ActionSheet                        showSeparator={false}                        showSparator={false}                        style={{                            paddingHorizontal: 22.5,                            flex: 1,                            zIndex: 9999999,                            elevation: 9999,                            position: 'absolute',                            borderTopLeftRadius: 0,                            borderTopRightRadius: 0,                        }}                        ref={(actionSheet) => {                            this.bottomActionSheetFileEditFromSlide = actionSheet                        }}                        position="bottom"                        onHide={this.onHideFileEditFromSlide}                        multiple                        showSelectedIcon={false}                    >                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'שינוי שם מסמך'}                            value={'changeFileName'}                            icon={                                <CustomIcon                                    name={'edit-icon'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 3,                                        right: -25,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressFilesEditFromSlide}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'העברת המסמך לתיקייה אחרת'}                            value={'transferFileToAnotherFolder'}                            icon={                                <CustomIcon                                    name={'next'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 3,                                        right: -25,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressFilesEditFromSlide}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'מחיקה'}                            value={'deleteFile'}                            icon={                                <CustomIcon                                    name={'trash-ocr'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 1,                                        right: -26,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressFilesEditFromSlide}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                                opacity: this.state.arrImgs && this.state.arrImgs.length ? 1 : 0.2,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                                opacity: this.state.arrImgs && this.state.arrImgs.length ? 1 : 0.2,                            }}                            showSelectedIcon={false}                            text={'הורדה'}                            value={'downloadFile'}                            icon={                                <CustomIcon                                    name={'download-file'}                                    size={20}                                    style={{                                        position: 'absolute',                                        top: 1,                                        right: -26,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.state.arrImgs && this.state.arrImgs.length ? this.onItemPressFilesEditFromSlide : null}                        />                        <ActionSheetItem                            style={{                                alignItems: 'flex-end',                                alignSelf: 'flex-end',                                alignContent: 'flex-end',                                justifyContent: 'flex-end',                                flex: 1,                            }}                            textStyle={{                                color: '#022258',                                textAlign: 'right',                                fontSize: sp(18),                                fontFamily: fonts.regular,                            }}                            showSelectedIcon={false}                            text={'ביטול'}                            value={'cancel'}                            icon={                                <CustomIcon                                    name={'times'}                                    size={12}                                    style={{                                        position: 'absolute',                                        top: 6,                                        right: -21,                                    }}                                    color={'#022258'}                                />                            }                            onPress={this.onItemPressFilesEditFromSlide}                        />                    </ActionSheet>                ) : (                    fileSliderOpen && !fileSliderOpen.statusDesc ? (                        <ActionSheet                            showSeparator={false}                            showSparator={false}                            style={{                                paddingHorizontal: 22.5,                                flex: 1,                                zIndex: 9999999,                                elevation: 9999,                                position: 'absolute',                                borderTopLeftRadius: 0,                                borderTopRightRadius: 0,                            }}                            ref={(actionSheet) => {                                this.bottomActionSheetFileEditFromSlide = actionSheet                            }}                            position="bottom"                            onHide={this.onHideFileEditFromSlide}                            multiple                            showSelectedIcon={false}                        >                            <ActionSheetItem                                style={{                                    alignItems: 'flex-end',                                    alignSelf: 'flex-end',                                    alignContent: 'flex-end',                                    justifyContent: 'flex-end',                                    flex: 1,                                }}                                textStyle={{                                    color: '#022258',                                    textAlign: 'right',                                    fontSize: sp(18),                                    fontFamily: fonts.regular,                                }}                                showSelectedIcon={false}                                text={'העברת המסמך לתיקייה אחרת'}                                value={'transferFileToAnotherFolder'}                                icon={                                    <CustomIcon                                        name={'next'}                                        size={20}                                        style={{                                            position: 'absolute',                                            top: 3,                                            right: -25,                                        }}                                        color={'#022258'}                                    />                                }                                onPress={this.onItemPressFilesEditFromSlide}                            />                            <ActionSheetItem                                style={{                                    alignItems: 'flex-end',                                    alignSelf: 'flex-end',                                    alignContent: 'flex-end',                                    justifyContent: 'flex-end',                                    flex: 1,                                }}                                textStyle={{                                    color: '#022258',                                    textAlign: 'right',                                    fontSize: sp(18),                                    fontFamily: fonts.regular,                                }}                                showSelectedIcon={false}                                text={'מחיקה'}                                value={'deleteFile'}                                icon={                                    <CustomIcon                                        name={'trash-ocr'}                                        size={20}                                        style={{                                            position: 'absolute',                                            top: 1,                                            right: -26,                                        }}                                        color={'#022258'}                                    />                                }                                onPress={this.onItemPressFilesEditFromSlide}                            />                            <ActionSheetItem                                style={{                                    alignItems: 'flex-end',                                    alignSelf: 'flex-end',                                    alignContent: 'flex-end',                                    justifyContent: 'flex-end',                                    flex: 1,                                    opacity: this.state.arrImgs && this.state.arrImgs.length ? 1 : 0.2,                                }}                                textStyle={{                                    color: '#022258',                                    textAlign: 'right',                                    fontSize: sp(18),                                    fontFamily: fonts.regular,                                    opacity: this.state.arrImgs && this.state.arrImgs.length ? 1 : 0.2,                                }}                                showSelectedIcon={false}                                text={'הורדה'}                                value={'downloadFile'}                                icon={                                    <CustomIcon                                        name={'download-file'}                                        size={20}                                        style={{                                            position: 'absolute',                                            top: 1,                                            right: -26,                                        }}                                        color={'#022258'}                                    />                                }                                onPress={this.state.arrImgs && this.state.arrImgs.length ? this.onItemPressFilesEditFromSlide : null}                            />                            <ActionSheetItem                                style={{                                    alignItems: 'flex-end',                                    alignSelf: 'flex-end',                                    alignContent: 'flex-end',                                    justifyContent: 'flex-end',                                    flex: 1,                                }}                                textStyle={{                                    color: '#022258',                                    textAlign: 'right',                                    fontSize: sp(18),                                    fontFamily: fonts.regular,                                }}                                showSelectedIcon={false}                                text={'ביטול'}                                value={'cancel'}                                icon={                                    <CustomIcon                                        name={'times'}                                        size={12}                                        style={{                                            position: 'absolute',                                            top: 6,                                            right: -21,                                        }}                                        color={'#022258'}                                    />                                }                                onPress={this.onItemPressFilesEditFromSlide}                            />                        </ActionSheet>                    ) : (                        <ActionSheet                            showSeparator={false}                            showSparator={false}                            style={{                                paddingHorizontal: 22.5,                                flex: 1,                                zIndex: 9999999,                                elevation: 9999,                                position: 'absolute',                                borderTopLeftRadius: 0,                                borderTopRightRadius: 0,                            }}                            ref={(actionSheet) => {                                this.bottomActionSheetFileEditFromSlide = actionSheet                            }}                            position="bottom"                            onHide={this.onHideFileEditFromSlide}                            multiple                            showSelectedIcon={false}                        >                            <ActionSheetItem                                style={{                                    alignItems: 'flex-end',                                    alignSelf: 'flex-end',                                    alignContent: 'flex-end',                                    justifyContent: 'flex-end',                                    flex: 1,                                }}                                textStyle={{                                    color: '#022258',                                    textAlign: 'right',                                    fontSize: sp(18),                                    fontFamily: fonts.regular,                                }}                                showSelectedIcon={false}                                text={'העברת המסמך לתיקייה אחרת'}                                value={'transferFileToAnotherFolder'}                                icon={                                    <CustomIcon                                        name={'next'}                                        size={20}                                        style={{                                            position: 'absolute',                                            top: 3,                                            right: -25,                                        }}                                        color={'#022258'}                                    />                                }                                onPress={this.onItemPressFilesEditFromSlide}                            />                            <ActionSheetItem                                style={{                                    alignItems: 'flex-end',                                    alignSelf: 'flex-end',                                    alignContent: 'flex-end',                                    justifyContent: 'flex-end',                                    flex: 1,                                    opacity: this.state.arrImgs && this.state.arrImgs.length ? 1 : 0.2,                                }}                                textStyle={{                                    color: '#022258',                                    textAlign: 'right',                                    fontSize: sp(18),                                    fontFamily: fonts.regular,                                    opacity: this.state.arrImgs && this.state.arrImgs.length ? 1 : 0.2,                                }}                                showSelectedIcon={false}                                text={'הורדה'}                                value={'downloadFile'}                                icon={                                    <CustomIcon                                        name={'download-file'}                                        size={20}                                        style={{                                            position: 'absolute',                                            top: 1,                                            right: -26,                                        }}                                        color={'#022258'}                                    />                                }                                onPress={this.state.arrImgs && this.state.arrImgs.length ? this.onItemPressFilesEditFromSlide : null}                            />                            <ActionSheetItem                                style={{                                    alignItems: 'flex-end',                                    alignSelf: 'flex-end',                                    alignContent: 'flex-end',                                    justifyContent: 'flex-end',                                    flex: 1,                                }}                                textStyle={{                                    color: '#022258',                                    textAlign: 'right',                                    fontSize: sp(18),                                    fontFamily: fonts.regular,                                }}                                showSelectedIcon={false}                                text={'ביטול'}                                value={'cancel'}                                icon={                                    <CustomIcon                                        name={'times'}                                        size={12}                                        style={{                                            position: 'absolute',                                            top: 6,                                            right: -21,                                        }}                                        color={'#022258'}                                    />                                }                                onPress={this.onItemPressFilesEditFromSlide}                            />                        </ActionSheet>                    )                )}            </Fragment>        )    }}