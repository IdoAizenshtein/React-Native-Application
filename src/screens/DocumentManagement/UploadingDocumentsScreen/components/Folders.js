import React, {Fragment, PureComponent} from 'react'import {withTranslation} from 'react-i18next'import {  ActivityIndicator,  Animated,  Dimensions,  FlatList,  Image,  Keyboard,  Modal,  RefreshControl,  StyleSheet,  Text,  TextInput,  TouchableOpacity,  View,  SafeAreaView,} from 'react-native'import {sp} from '../../../../utils/func'import {colors, fonts} from '../../../../styles/vars'import 'react-native-gesture-handler';import CustomIcon from '../../../../components/Icons/Fontello'import {Icon} from 'react-native-elements'import {IS_IOS} from '../../../../constants/common'import ActionButton from 'react-native-action-button'import {ActionSheet, ActionSheetItem} from 'react-native-action-sheet-component'import {createFolderApi, deleteFolderApi, updateFolderNameApi} from '../../../../api'const styles = StyleSheet.create({  container: {    backgroundColor: 'white',    position: 'absolute',    bottom: 0,    left: 0,    right: 0,    top: 0,    zIndex: 9,  },  preview: {    flex: 1,    justifyContent: 'flex-end',    alignItems: 'center',    width: '100%',  },  capture: {    alignSelf: 'center',    width: 65,    height: 65,    borderRadius: 32.5,    borderColor: 'white',    borderWidth: 5,    marginBottom: 20,  },  nav: {    height: 33,    alignSelf: 'center',    flex: 1,  },  navText: {    fontSize: sp(18),    fontFamily: fonts.semiBold,    textAlign: 'center',  },  rowAlbum: {    height: 62.5,    flexDirection: 'row-reverse',    justifyContent: 'space-between',    alignItems: 'center',    marginBottom: 16,    paddingRight: 6,    alignContent: 'center',  },  folderGrid: {    flexDirection: 'column',    alignItems: 'center',    justifyContent: 'center',    flex: 1,  },  folderRow: {    flexDirection: 'row-reverse',    alignItems: 'center',    justifyContent: 'flex-start',    flex: 1,    height: 45,  },  itemInvisible: {    backgroundColor: 'transparent',  },  closeCameraAndCameraRoll: {    position: 'absolute',    top: 20,    right: 17.5,    zIndex: 99,  },})@withTranslation()export default class Folders extends PureComponent {  constructor (props) {    super(props)    this.state = {      sorts: [        {          text: 'שם תיקייה',          val: 'folderName',          sortDown: true,        },        {          text: 'בשימוש נפוץ',          val: 'lastUseDate',          sortDown: true,        },        {          text: 'פתיחה אחרונה',          val: 'dateCreated',          sortDown: true,        },      ],      sortValue: {        text: 'מיון',        val: 'folderName',        sortDown: true,      },      folders: props.folders,      viewFoldersAsGrid: false,      slide: new Animated.Value(Dimensions.get('window').height),      takeMorePhotos: false,      alertMoreThanFive: false,      fadeAnim: new Animated.Value(0),      refreshing: false,      containerSelectedPhotos: [],      alertMoreThanThirty: false,      fadeAnimThirty: new Animated.Value(0),      refreshingPhotos: false,      folderEditItem: false,      folderItemForChange: false,      modalAlert: {        visible: false,        children: {          header: null,          body: null,          footer: null,        },        styleWrap: null,      },    }    this.slide()  }  UNSAFE_componentWillReceiveProps (props) {    console.log('UNSAFE_componentWillReceiveProps', props.folders)    if (props.folders && props.folders.folders !== this.props.folders.folders) {      this.setState({        refreshing: false,        folders: props.folders,      }, () => {        if (this.state.folders && this.state.folders.folders && this.state.folders.folders.length > 0) {          this.sortFolders(this.state.sortValue)        }      })    }  }  componentWillUnmount () {  }  slide = () => {    Animated.timing(this.state.slide, {      toValue: 0,      duration: 200,      useNativeDriver: true,    }).start()  }  _onRefresh = () => {    const { getFolders, folders } = this.props    this.setState({ refreshing: true })    getFolders(folders.companyDetailsItem)()  }  renderFolder = ({ item, index }) => {    if (item.empty === true) {      return <View style={[styles.folderGrid, styles.itemInvisible]} />    }    const { viewFoldersAsGrid } = this.state    const { openCameraAndCameraRoll, folders } = this.props    return (      <TouchableOpacity        key={index}        onPress={openCameraAndCameraRoll(folders.companyDetailsItem, null, item)}        style={viewFoldersAsGrid ? [styles.folderGrid, { height: 110 }] : [styles.folderRow]}>        <View style={{          position: 'relative',        }}>          <CustomIcon            name={'folder'}            size={viewFoldersAsGrid ? 60 : 40}            color={'#022258'} />          {item.editable === false && (            <Image              resizeMode="cover"              style={[{                height: viewFoldersAsGrid ? 16.5 : 9.5,                width: viewFoldersAsGrid ? 16.5 : 9.5,                position: 'absolute',                bottom: viewFoldersAsGrid ? 10 : 8,                right: viewFoldersAsGrid ? 5 : 4,              }]}              source={require('BiziboxUI/assets/b.png')} />          )}        </View>        <View style={{          marginLeft: 10,          flexDirection: 'row-reverse',          alignItems: 'center',          alignContent: 'center',          justifyContent: 'space-between',          flex: 1,          paddingTop: viewFoldersAsGrid ? 5 : 0,        }}>          <Text style={{            fontSize: sp(17.5),            color: '#022258',            fontFamily: fonts.regular,          }}>{item.folderName}</Text>          {item.editable && (            <TouchableOpacity              style={{                alignSelf: viewFoldersAsGrid ? 'flex-start' : 'center',              }}              hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}              onPress={this.openActionSheetEdit(item)}>              <Icon                iconStyle={{                  marginLeft: -10,                }}                name={'dots-vertical'}                type="material-community"                size={viewFoldersAsGrid ? 36 : 33}                color={'#022258'}              />            </TouchableOpacity>          )}        </View>      </TouchableOpacity>    )  }  renderSeparatorView = () => {    return (      <View style={{        height: 19,        width: '100%',      }} />    )  }  formatRow = (dataArr, numColumns) => {    const data = JSON.parse(JSON.stringify(dataArr))    const numberOfFullRows = Math.floor(data.length / numColumns)    let numberOfElementsLastRow = data.length - (numberOfFullRows * numColumns)    while (numberOfElementsLastRow !== numColumns && numberOfElementsLastRow !== 0) {      data.push({ key: `blank-${numberOfElementsLastRow}`, empty: true })      numberOfElementsLastRow++    }    return data  }  closeAlertModal = () => {    const modalAlert = Object.assign({}, this.state.modalAlert)    modalAlert.visible = false    modalAlert.children = {      header: null,      body: null,      footer: null,    }    modalAlert.styleWrap = null    this.setState({      folderItemForChange: false,      modalAlert,    })  }  changeTypeOfView = () => {    const { viewFoldersAsGrid } = this.state    this.setState({      viewFoldersAsGrid: !viewFoldersAsGrid,    })  }  openActionSheet = () => {    this.bottomActionSheet.show(() => {      console.log('callback - show')    })  }  onItemPress = (value) => {    if (value !== 'cancel') {      const { sorts } = this.state      const sortsSave = JSON.parse(JSON.stringify(sorts))      const item = sortsSave.find(it => it.val === value)      item.sortDown = !item.sortDown      this.setState({        sorts: sortsSave,        sortValue: item,      }, () => {        this.sortFolders(item)        console.log(item)      })    } else {      console.log(value)    }  }  onChange = (value, index, values) => {  }  onHide = () => {    console.log('onHide')    if (this.bottomActionSheet) {      this.bottomActionSheet.hide(() => {        console.log('callback - hide')      })    }  }  sortFolders = (item) => {    const value = item.val    const sortDown = item.sortDown    const foldersState = Object.assign({}, this.state.folders)    if (value === 'folderName') {      const isHebrew = foldersState.folders.filter((it) => /[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)      const isEnglish = foldersState.folders.filter((it) => /^[A-Za-z]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)      const isNumbers = foldersState.folders.filter((it) => /^[0-9]+$/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)      const isOthers = foldersState.folders.filter((it) => !/^[A-Za-z]+$/.test(it.folderName) && !/^[0-9]+$/.test(it.folderName) && !/[\u0590-\u05FF]/.test(it.folderName)).sort((a, b) => (a.folderName > b.folderName) ? 1 : -1)      foldersState.folders = isHebrew.concat(isEnglish, isNumbers, isOthers)      if (!sortDown) {        foldersState.folders.reverse()      }      this.setState({        folders: foldersState,      })    } else if (value === 'lastUseDate') {      foldersState.folders.sort((a, b) => a.lastUseDate - b.lastUseDate)      if (!sortDown) {        foldersState.folders.reverse()      }      this.setState({        folders: foldersState,      })    } else if (value === 'dateCreated') {      foldersState.folders.sort((a, b) => a.dateCreated - b.dateCreated)      if (!sortDown) {        foldersState.folders.reverse()      }      this.setState({        folders: foldersState,      })    }  }  openActionSheetEdit = (folderEditItem) => () => {    this.setState({      folderEditItem,    }, () => {      setTimeout(() => {        this.bottomActionSheetEdit.show(() => {          console.log('callback - show')        })      }, 20)    })  }  updateFolderName = () => {    if (this.state.folderItemForChange.folderName && this.state.folderItemForChange.folderName.toString().length > 0) {      this.handleCloseKeyboard()      const folderItemForChange = Object.assign({}, this.state.folderItemForChange)      folderItemForChange.error = false      this.setState({ folderItemForChange })      updateFolderNameApi.post({        body: {          'id': this.state.folderItemForChange.folderId,          'name': this.state.folderItemForChange.folderName,        },      })        .then(res => {          const foldersState = Object.assign({}, this.state.folders)          foldersState.folders.find(it => it.folderId === this.state.folderItemForChange.folderId).folderName = this.state.folderItemForChange.folderName          this.setState({            folders: foldersState,            folderItemForChange: false,          }, () => {            this.closeAlertModal()          })        })        .catch(() => {        })    } else {      const folderItemForChange = Object.assign({}, this.state.folderItemForChange)      folderItemForChange.error = true      this.setState({ folderItemForChange })    }  }  createFolder = () => {    if (this.state.folderItemForChange.folderName && this.state.folderItemForChange.folderName.toString().length > 0) {      this.handleCloseKeyboard()      const folderItemForChange = Object.assign({}, this.state.folderItemForChange)      folderItemForChange.error = false      this.setState({ folderItemForChange })      createFolderApi.post({        body: {          'companyId': this.state.folders.companyDetailsItem.companyId,          'folderName': this.state.folderItemForChange.folderName,        },      })        .then(res => {          this.closeAlertModal()          const { getFolders, folders } = this.props          getFolders(folders.companyDetailsItem)()        })        .catch(() => {        })    } else {      const folderItemForChange = Object.assign({}, this.state.folderItemForChange)      folderItemForChange.error = true      this.setState({ folderItemForChange })    }  }  containerTouched = () => {    if (this.inputRef && this.inputRef.blur) {      this.inputRef.blur()    }    return false  }  handleSetRef = (ref) => {    this.inputRef = ref  }  handleCloseKeyboard = () => {    Keyboard.dismiss()  }  deleteFolder = () => {    deleteFolderApi.post({      body: {        'uuid': this.state.folderEditItem.folderId,      },    })      .then(res => {        const foldersState = Object.assign({}, this.state.folders)        foldersState.folders = foldersState.folders.filter(it => it.folderId !== this.state.folderEditItem.folderId)        this.setState({          folders: foldersState,          folderEditItem: false,        }, () => {          this.closeAlertModal()        })      })      .catch(() => {      })  }  onItemPressEdit = (value) => {    if (value !== 'cancel') {      if (value === 'changeFolderName' || value === 'createFolder') {        const folderEditItem = Object.assign({}, this.state.folderEditItem)        this.setState({          folderItemForChange: value === 'changeFolderName' ? folderEditItem : { folderName: '' },        }, () => {          const modalAlert = Object.assign({}, this.state.modalAlert)          modalAlert.visible = true          modalAlert.children = {            header: (<View style={{              height: 40,              flexDirection: 'row-reverse',              justifyContent: 'center',              alignSelf: 'center',            }}>              <Text style={{                paddingHorizontal: 20,                paddingTop: 15,                color: '#022258',                fontSize: sp(18),                fontFamily: fonts.semiBold,                textAlign: 'center',              }}>{value === 'changeFolderName' ? 'שינוי שם תיקייה' : 'שם לתיקייה החדשה'}</Text>            </View>),            body: () => {              return (<View style={{                height: 28,                marginHorizontal: 22.5,                flexDirection: 'row-reverse',                borderBottomColor: !this.state.folderItemForChange.error ? '#022258' : 'red',                borderBottomWidth: 1,                flex: 1,              }}>                <TextInput                  ref={this.handleSetRef}                  blurOnSubmit                  autoFocus                  onBlur={this.handleCloseKeyboard}                  onSubmitEditing={value === 'changeFolderName' ? this.updateFolderName : this.createFolder}                  autoCorrect={false}                  autoCapitalize="sentences"                  returnKeyType="send"                  keyboardType="default"                  style={[{                    direction: 'ltr',                    textAlign: 'right',                    flex: 1,                    height: 28,                    fontSize: sp(14),                    color: colors.blue32,                    fontFamily: fonts.regular,                    paddingVertical: 1,                    paddingHorizontal: 5,                  }]}                  placeholder={value === 'changeFolderName' ? 'שם התיקייה' : 'בחרו שם לתיקייה החדשה'}                  placeholderTextColor={'#cac9c9'}                  value={this.state.folderItemForChange.folderName}                  multiline={false}                  onEndEditing={(e) => {                    this.handleCloseKeyboard()                    const folderItemForChange = Object.assign({}, this.state.folderItemForChange)                    folderItemForChange.folderName = e.nativeEvent.text                    this.setState({ folderItemForChange })                  }}                  onChangeText={(folderName) => {                    console.log(folderName)                    const folderItemForChange = Object.assign({}, this.state.folderItemForChange)                    folderItemForChange.folderName = folderName                    this.setState({ folderItemForChange })                  }}                  underlineColorAndroid="rgba(0,0,0,0)"                />              </View>)            },            footer: (              <View style={{                marginHorizontal: 20,                height: 45,                flexDirection: 'row-reverse',                justifyContent: 'flex-end',              }}>                <TouchableOpacity                  onPress={this.closeAlertModal}                  style={{                    width: 65,                  }}>                  <Text style={{                    color: '#038ed6',                    fontSize: sp(18),                    fontFamily: fonts.semiBold,                  }}>                    {'ביטול'}                  </Text>                </TouchableOpacity>                <TouchableOpacity                  onPress={value === 'changeFolderName' ? this.updateFolderName : this.createFolder}                  style={{                    width: 65,                  }}>                  <Text style={{                    color: '#038ed6',                    fontSize: sp(18),                    fontFamily: fonts.semiBold,                  }}>                    {'אישור'}                  </Text>                </TouchableOpacity>              </View>            ),          }          modalAlert.styleWrap = {            backgroundColor: 'white',            borderRadius: 8,            position: 'absolute',            top: 127,            right: '50%',            marginRight: -160,            height: 174.5,            width: 320,            flexDirection: 'column',          }          this.setState({            modalAlert,          })        })      } else if (value === 'deleteFolder') {        const modalAlert = Object.assign({}, this.state.modalAlert)        modalAlert.visible = true        modalAlert.children = {          header: (<View style={{            height: 40,            borderBottomWidth: 1,            borderBottomColor: '#022258',            marginHorizontal: 22.5,            flexDirection: 'column',            justifyContent: 'center',            alignItems: 'flex-end',          }}>            <Text style={{              paddingHorizontal: 7,              paddingTop: 7,              color: '#022258',              fontSize: sp(18),              fontFamily: fonts.bold,            }}>{'מחיקת תיקיה'}</Text>          </View>),          body: () => {            return (              <View style={{                flex: 1,                marginTop: 15,                paddingHorizontal: 7,              }}>                <View style={{                  marginHorizontal: 22.5,                  flex: 1,                  flexDirection: 'column',                  justifyContent: 'flex-start',                  alignItems: 'flex-end',                }}>                  <Text style={{                    textAlign: 'right',                    color: '#022258',                    fontSize: sp(18),                    fontFamily: fonts.regular,                  }}>{'התיקיה '}<Text style={{                      fontFamily: fonts.bold,                    }}>{this.state.folderEditItem.folderName}</Text>{' והמסמכים שבתוכה ימחקו ללא אפשרות שחזור'}</Text>                </View>              </View>)          },          footer: (            <View style={{              marginHorizontal: 20,              height: 45,              flexDirection: 'row-reverse',              justifyContent: 'flex-end',            }}>              <TouchableOpacity                onPress={this.closeAlertModal}                style={{                  width: 65,                }}>                <Text style={{                  color: '#038ed6',                  fontSize: sp(18),                  fontFamily: fonts.semiBold,                }}>                  {'ביטול'}                </Text>              </TouchableOpacity>              <TouchableOpacity                onPress={this.deleteFolder}                style={{                  width: 65,                }}>                <Text style={{                  color: '#038ed6',                  fontSize: sp(18),                  fontFamily: fonts.semiBold,                }}>                  {'מחיקה'}                </Text>              </TouchableOpacity>            </View>          ),        }        modalAlert.styleWrap = {          backgroundColor: 'white',          borderRadius: 8,          position: 'absolute',          top: 127,          right: '50%',          marginRight: -160,          height: 174.5,          width: 320,          flexDirection: 'column',        }        this.setState({          modalAlert,        })      }    } else {      console.log(value)    }  }  onChangeEdit = (value, index, values) => {  }  onHideEdit = () => {    console.log('onHide')    if (this.bottomActionSheetEdit) {      this.bottomActionSheetEdit.hide(() => {        console.log('callback - bottomActionSheetEdit')        this.setState({          folderEditItem: false,        })      })    } else {      this.setState({        folderEditItem: false,      })    }  }  handleCreateFolder = () => {    this.onItemPressEdit('createFolder')  }  render () {    const { closeFolderModal } = this.props    const { sorts, viewFoldersAsGrid, sortValue, folderEditItem, slide, refreshing, modalAlert, folders } = this.state    return (      <Animated.View        style={[styles.container, {          transform: [            {              translateY: slide,            },          ],        }]}>          <SafeAreaView style={{            flex: 1,            flexDirection: 'column',          }}>            <Fragment>              <View style={{                height: 45,                flexDirection: 'row-reverse',                justifyContent: 'space-between',                alignItems: 'center',                alignContent: 'center',                marginHorizontal: 10,              }}>                <TouchableOpacity                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    onPress={closeFolderModal}                    style={{                      marginRight: -6,                      marginTop: -3,                    }}>                  <Icon                      name="chevron-small-right"                      type="entypo"                      size={50}                      color={'#022258'}                  />                </TouchableOpacity>                <View style={{                  alignSelf: 'center',                  flex: 90,                }}>                  <Text style={{                    fontSize: sp(19),                    color: '#022258',                    fontFamily: fonts.semiBold,                    textAlign: 'center',                  }}>{'בחירת תיקייה'}</Text>                </View>                <View style={{                  flex: 10,                }} />              </View>              <View style={{                height: 45,                flexDirection: 'row-reverse',                justifyContent: 'space-between',                alignItems: 'center',                alignContent: 'center',                marginHorizontal: 20,              }}>                <TouchableOpacity                    style={{                      flexDirection: 'row-reverse',                    }}                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    onPress={this.openActionSheet}>                  <Text style={{                    fontSize: sp(17.5),                    color: '#022258',                    fontFamily: fonts.regular,                  }}>{sortValue.text}</Text>                  <CustomIcon                      name={'arrow-ocr'}                      size={12}                      style={{                        marginRight: 10,                        transform: [{ rotate: sortValue.sortDown ? '90deg' : '270deg' }],                      }}                      color={'#022258'}                  />                </TouchableOpacity>                <TouchableOpacity                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    onPress={this.changeTypeOfView}>                  {/* <Icon */}                  {/*  name={viewFoldersAsGrid ? 'view-grid' : 'format-list-bulleted'} */}                  {/*  type='material-community' */}                  {/*  size={24} */}                  {/*  color={'#022258'} */}                  {/* /> */}                  <CustomIcon                      name={viewFoldersAsGrid ? 'display' : 'list'}                      size={24}                      color={'#022258'} />                </TouchableOpacity>              </View>              {(folders.folders === undefined) && (                  <View style={{                    flex: 1,                    justifyContent: 'center',                    alignItems: 'center',                  }}><ActivityIndicator color="#999999"/></View>)}              {(folders.folders !== undefined) && (                  <Fragment>                    <FlatList                        refreshControl={                          <RefreshControl                              refreshing={refreshing}                              onRefresh={this._onRefresh}                          />                        }                        extraData={refreshing}                        showsVerticalScrollIndicator={false}                        style={{                          marginHorizontal: 20,                        }}                        contentStyle={{                          flex: 1,                          justifyContent: 'flex-end',                          alignItems: 'center',                        }}                        horizontal={false}                        scrollEventThrottle={IS_IOS ? 16 : 1}                        data={(!viewFoldersAsGrid) ? folders.folders : this.formatRow(folders.folders, 2)}                        renderItem={this.renderFolder}                        keyExtractor={(item, index) => `${item.folderId}_${index}`}                        bounces                        bouncesZoom                        initialNumToRender={20}                        enableOnAndroid                        removeClippedSubviews                        key={viewFoldersAsGrid}                        numColumns={(!viewFoldersAsGrid) ? 1 : 2}                        ItemSeparatorComponent={!viewFoldersAsGrid ? null : this.renderSeparatorView}                    />                    <ActionButton                        position={'left'}                        offsetY={25}                        onPress={this.handleCreateFolder}                        bgColor="#ffffffbf"                        buttonColor="#022258"                        size={54}                        spacing={0}                        buttonTextStyle={{                          fontSize: 54,                          lineHeight:54,                          textAlign: 'center',                          marginTop: (IS_IOS ? -6 : 3),                        }}                    />                  </Fragment>              )}            </Fragment>            <Modal                animationType="none"                transparent                visible={modalAlert && modalAlert.visible}>              <View onStartShouldSetResponder={this.containerTouched}                    style={{                      flex: 1,                      backgroundColor: 'rgba(0,0,0,0.75)',                    }}>                <View style={modalAlert.styleWrap ? modalAlert.styleWrap : {}}>                  {modalAlert.children.header}                  <View style={{                    flex: 1,                    flexDirection: 'row-reverse',                    justifyContent: 'center',                    marginTop: 20,                  }}>                    {modalAlert.children.body ? modalAlert.children.body() : null}                  </View>                  {modalAlert.children.footer}                </View>              </View>            </Modal>            <ActionSheet                showSeparator={false}                showSparator={false}                style={{                  paddingHorizontal: 22.5,                  flex: 1,                  zIndex: 999999,                  elevation: 999,                  position: 'absolute',                  borderTopLeftRadius: 0,                  borderTopRightRadius: 0,                }}                ref={(actionSheet) => {                  this.bottomActionSheet = actionSheet                }}                position="bottom"                onChange={this.onChange}                onHide={this.onHide}                multiple                showSelectedIcon={false}            >              <ActionSheetItem                  style={{                    alignItems: 'flex-end',                    alignSelf: 'flex-end',                    alignContent: 'flex-end',                    justifyContent: 'flex-end',                    flex: 1,                  }}                  textStyle={{                    color: '#022258',                    textAlign: 'right',                    fontSize: sp(18),                    fontFamily: fonts.regular,                  }}                  showSelectedIcon={false}                  text={'שם תיקייה'}                  value={'folderName'}                  icon={                    <CustomIcon                        name={'arrow-ocr'}                        size={12}                        style={{                          transform: [{ rotate: sorts[0].sortDown ? '90deg' : '270deg' }],                          position: 'absolute',                          top: 6,                          right: -21,                        }}                        color={'#022258'}                    />                  }                  onPress={this.onItemPress}              />              <ActionSheetItem                  style={{                    alignItems: 'flex-end',                    alignSelf: 'flex-end',                    alignContent: 'flex-end',                    justifyContent: 'flex-end',                    flex: 1,                  }}                  textStyle={{                    color: '#022258',                    textAlign: 'right',                    fontSize: sp(18),                    fontFamily: fonts.regular,                  }}                  showSelectedIcon={false}                  text={'בשימוש נפוץ'}                  value={'lastUseDate'}                  icon={                    <CustomIcon                        name={'arrow-ocr'}                        size={12}                        style={{                          transform: [{ rotate: sorts[1].sortDown ? '90deg' : '270deg' }],                          position: 'absolute',                          top: 6,                          right: -21,                        }}                        color={'#022258'}                    />                  }                  onPress={this.onItemPress}              />              <ActionSheetItem                  style={{                    alignItems: 'flex-end',                    alignSelf: 'flex-end',                    alignContent: 'flex-end',                    justifyContent: 'flex-end',                    flex: 1,                  }}                  textStyle={{                    color: '#022258',                    textAlign: 'right',                    fontSize: sp(18),                    fontFamily: fonts.regular,                  }}                  showSelectedIcon={false}                  text={'פתיחה אחרונה'}                  value={'dateCreated'}                  icon={                    <CustomIcon                        name={'arrow-ocr'}                        size={12}                        style={{                          transform: [{ rotate: sorts[2].sortDown ? '90deg' : '270deg' }],                          position: 'absolute',                          top: 6,                          right: -21,                        }}                        color={'#022258'}                    />                  }                  onPress={this.onItemPress}              />              <ActionSheetItem                  style={{                    alignItems: 'flex-end',                    alignSelf: 'flex-end',                    alignContent: 'flex-end',                    justifyContent: 'flex-end',                    flex: 1,                  }}                  textStyle={{                    color: '#022258',                    textAlign: 'right',                    fontSize: sp(18),                    fontFamily: fonts.regular,                  }}                  showSelectedIcon={false}                  text={'ביטול'}                  value={'cancel'}                  icon={                    <CustomIcon                        name={'times'}                        size={12}                        style={{                          position: 'absolute',                          top: 6,                          right: -21,                        }}                        color={'#022258'}                    />                  }                  onPress={this.onItemPress}              />            </ActionSheet>            {folderEditItem && folderEditItem.deletable ? (                <ActionSheet                    showSeparator={false}                    showSparator={false}                    style={{                      paddingHorizontal: 22.5,                      flex: 1,                      zIndex: 999999,                      elevation: 999,                      position: 'absolute',                      borderTopLeftRadius: 0,                      borderTopRightRadius: 0,                    }}                    ref={(actionSheet) => {                      this.bottomActionSheetEdit = actionSheet                    }}                    position="bottom"                    onChange={this.onChangeEdit}                    onHide={this.onHideEdit}                    multiple                    showSelectedIcon={false}                >                  <ActionSheetItem                      style={{                        alignItems: 'flex-end',                        alignSelf: 'flex-end',                        alignContent: 'flex-end',                        justifyContent: 'flex-end',                        flex: 1,                      }}                      textStyle={{                        color: '#022258',                        textAlign: 'right',                        fontSize: sp(18),                        fontFamily: fonts.regular,                      }}                      showSelectedIcon={false}                      text={'שינוי שם תיקייה'}                      value={'changeFolderName'}                      icon={                        <CustomIcon                            name={'tag'}                            size={20}                            style={{                              position: 'absolute',                              top: 3,                              right: -25,                            }}                            color={'#022258'}                        />                      }                      onPress={this.onItemPressEdit}                  />                  <ActionSheetItem                      style={{                        alignItems: 'flex-end',                        alignSelf: 'flex-end',                        alignContent: 'flex-end',                        justifyContent: 'flex-end',                        flex: 1,                      }}                      textStyle={{                        color: '#022258',                        textAlign: 'right',                        fontSize: sp(18),                        fontFamily: fonts.regular,                      }}                      showSelectedIcon={false}                      text={'מחיקת תיקייה'}                      value={'deleteFolder'}                      icon={                        <CustomIcon                            name={'trash-ocr'}                            size={20}                            style={{                              position: 'absolute',                              top: 1,                              right: -26,                            }}                            color={'#022258'}                        />                      }                      onPress={this.onItemPressEdit}                  />                  <ActionSheetItem                      style={{                        alignItems: 'flex-end',                        alignSelf: 'flex-end',                        alignContent: 'flex-end',                        justifyContent: 'flex-end',                        flex: 1,                      }}                      textStyle={{                        color: '#022258',                        textAlign: 'right',                        fontSize: sp(18),                        fontFamily: fonts.regular,                      }}                      showSelectedIcon={false}                      text={'ביטול'}                      value={'cancel'}                      icon={                        <CustomIcon                            name={'times'}                            size={12}                            style={{                              position: 'absolute',                              top: 6,                              right: -21,                            }}                            color={'#022258'}                        />                      }                      onPress={this.onItemPressEdit}                  />                </ActionSheet>            ) : (                <ActionSheet                    showSeparator={false}                    showSparator={false}                    style={{                      paddingHorizontal: 22.5,                      flex: 1,                      zIndex: 999999,                      elevation: 999,                      position: 'absolute',                      borderTopLeftRadius: 0,                      borderTopRightRadius: 0,                    }}                    ref={(actionSheet) => {                      this.bottomActionSheetEdit = actionSheet                    }}                    position="bottom"                    onChange={this.onChangeEdit}                    onHide={this.onHideEdit}                    multiple                    showSelectedIcon={false}                >                  <ActionSheetItem                      style={{                        alignItems: 'flex-end',                        alignSelf: 'flex-end',                        alignContent: 'flex-end',                        justifyContent: 'flex-end',                        flex: 1,                      }}                      textStyle={{                        color: '#022258',                        textAlign: 'right',                        fontSize: sp(18),                        fontFamily: fonts.regular,                      }}                      showSelectedIcon={false}                      text={'שינוי שם תיקייה'}                      value={'changeFolderName'}                      icon={                        <CustomIcon                            name={'tag'}                            size={20}                            style={{                              position: 'absolute',                              top: 3,                              right: -25,                            }}                            color={'#022258'}                        />                      }                      onPress={this.onItemPressEdit}                  />                  <ActionSheetItem                      style={{                        alignItems: 'flex-end',                        alignSelf: 'flex-end',                        alignContent: 'flex-end',                        justifyContent: 'flex-end',                        flex: 1,                      }}                      textStyle={{                        color: '#022258',                        textAlign: 'right',                        fontSize: sp(18),                        fontFamily: fonts.regular,                      }}                      showSelectedIcon={false}                      text={'ביטול'}                      value={'cancel'}                      icon={                        <CustomIcon                            name={'times'}                            size={12}                            style={{                              position: 'absolute',                              top: 6,                              right: -21,                            }}                            color={'#022258'}                        />                      }                      onPress={this.onItemPressEdit}                  />                </ActionSheet>            )}          </SafeAreaView>      </Animated.View>    )  }}