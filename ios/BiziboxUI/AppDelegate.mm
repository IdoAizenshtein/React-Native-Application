#import "AppDelegate.h"#import <React/RCTBridge.h>#import <React/RCTBundleURLProvider.h>#import <React/RCTRootView.h>#import <Firebase.h>#import <React/RCTI18nUtil.h>#import "RNSplashScreen.h"#import <SDWebImage/SDWebImage.h>#import <SDWebImagePhotosPlugin/SDImagePhotosLoader.h>#import "SDImageCodersManager.h"#import <SDWebImageWebPCoder/SDImageWebPCoder.h>#import <React/RCTBundleURLProvider.h>@implementation AppDelegate- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions{  self.moduleName = @"BiziboxUI";  // You can add your custom initial props in the dictionary below.  // They will be passed down to the ViewController used by React Native.  self.initialProps = @{};  [SDImageLoadersManager.sharedManager addLoader:SDImagePhotosLoader.sharedLoader];  SDWebImageManager.defaultImageLoader = SDImageLoadersManager.sharedManager;  if ([FIRApp defaultApp] == nil) {     [FIRApp configure];   }  [[RCTI18nUtil sharedInstance] allowRTL:NO];  [[RCTI18nUtil sharedInstance] forceRTL:NO];  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge                                                   moduleName:@"BiziboxUI"                                            initialProperties:nil];  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];  UIViewController *rootViewController = [UIViewController new];  rootViewController.view = rootView;  self.window.rootViewController = rootViewController;  [self.window makeKeyAndVisible];  [RNSplashScreen show];  return [super application:application didFinishLaunchingWithOptions:launchOptions];}- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge{#if DEBUG  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index"];#else  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];#endif}/// This method controls whether the `concurrentRoot`feature of React18 is turned on or off.////// @see: https://reactjs.org/blog/2022/03/29/react-v18.html/// @note: This requires to be rendering on Fabric (i.e. on the New Architecture)./// @return: `true` if the `concurrentRoot` feature is enabled. Otherwise, it returns `false`.- (BOOL)concurrentRootEnabled{  return true;}@end